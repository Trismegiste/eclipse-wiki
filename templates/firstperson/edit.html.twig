{% extends "base.html.twig" %}

{% block title %}{{ place.title }}{% endblock %}

{% block body %}
    <div class="pure-g">
        <div class="pure-u-1 pure-u-xl-4-5">
            <div>
                <canvas id="renderCanvas">
                </canvas>
            </div>
        </div>
        <aside class="pure-u-1 pure-u-xl-1-5">
            <article x-data="displayCellInfo" x-on:selectcell.window="display($event)">
                {{ form(writer) }}
                {% if place.battlemap3d is not empty %}
                    <div class="pure-form">
                        <a href="{{ path('app_firstperson_delete', {pk: place.pk}) }}" class="pure-button button-delete pure-input-1">Regénérer la map</a>
                    </div>
                {% endif %}
                <hr/>
                <template x-if="cellInfo !== null">
                    <div>
                        <hgroup>
                            <h2 x-text="'Room ' + cellInfo.uid + ' @' + cellInfo.cellIndex"></h2>
                            <h3 x-text="'Type ' + cellInfo.template"></h3>
                        </hgroup>
                        <p>Distance = <span x-text="distanceFromCamera(cellInfo.x, cellInfo.y)"></span></p>
                        <hr/>
                        {{ form(legend) }}
                    </div>
                </template>
                <hr/>
                <div x-html="characterCard"
                     x-init="$watch('characterCard', value => { $nextTick(()=> { Pushable_subscribe(document.querySelectorAll('.pushable a')) }) })"></div>
                <button x-show="characterCard != null" x-on:click="deleteNpc">Delete</button>
                {{ form(npc_tool) }}
            </article>
            <hr/>
            {{ include('fragment/flashes.html.twig') }}
            {{ form(broadcast,{attr: {hidden:true}}) }}
            {{ form(gm_view,{attr: {hidden:true}}) }}
        </aside>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="{{ asset('js/BattlemapBuilder.js') }}?{{ random() }}"></script>
    <script src="{{ asset('js/BattlemapDocument.js') }}?{{ random() }}"></script>
    <script src="{{ asset('js/battlemap-loader.js') }}"></script>
    <script src="{{ asset('js/picture-pusher.js') }}"></script>
    <script src="{{ asset('babylon/meshwriter.min.js') }}"></script>
    <script>
        BABYLON.SceneLoader.RegisterPlugin(battlemapLoader)
        const canvas = document.getElementById("renderCanvas") // Get the canvas element
        const engine = new BABYLON.Engine(canvas) // Generate the BABYLON 3D engine

        // Creates Scene object
        const scene = new BABYLON.Scene(engine)

        // Creates and positions a free camera for GM
        const camera = new BABYLON.UniversalCamera("gm-camera", new BABYLON.Vector3(0, 0, 0), scene)
        camera.setTarget(new BABYLON.Vector3(0, 0, -1))
        camera.attachControl(canvas)

        BABYLON.SceneLoader.Append("/fps/scene/", "{{ place.pk }}.battlemap", scene, function (scene) {})

        // Register a render loop to repeatedly render the scene
        engine.runRenderLoop(function () {
            scene.render()
        })
        // Watch for browser/canvas resize events
        window.addEventListener("resize", function () {
            engine.resize()
        })

        document.addEventListener('alpine:init', () => {
            Alpine.data('displayCellInfo', () => ({
                    cellInfo: null,
                    characterCard: null,
                    selectedNpc: null,

                    display(event) {
                        this.cellInfo = event.detail
                        if (this.cellInfo.npc !== null) {
                            const npc = this.cellInfo.npc
                            fetch('{{ path('app_npcgenerator_minicard') }}?title=' + npc.label)
                                    .then(response => {
                                        return response.text()
                                    })
                                    .then(content => {
                                        this.characterCard = content
                                    })
                        } else {
                            this.characterCard = null
                        }
                    },

                    distanceFromCamera(x, y) {
                        const dx = camera.position.x - x
                        const dy = camera.position.z - y

                        return Math.ceil(Math.sqrt(dx * dx + dy * dy) / (2 * Math.sqrt(3) / 3) - 0.05)
                    },

                    write(event) {
                        event.preventDefault()
                        const form = new FormData(event.target)
                        const excluded = ['npcSpritePtr', 'legendPtr']
                        form.set('battlemap3d_write[battlemap3d]', JSON.stringify(scene.metadata, (key, value) => {
                            return (-1 === excluded.indexOf(key)) ? value : undefined
                        }))
                        fetch(event.target.action, {
                            method: 'post',
                            body: form,
                            redirect: 'manual'
                        }).then(function (response) {
                            return response.json()
                        }).then(function (status) {
                            pushFlash(event.target, status.level, status.message)
                        })
                    },

                    setLegend(event) {
                        event.preventDefault()
                        scene.setLegendAtCell(this.cellInfo.cellIndex, this.cellInfo.legend)

                        let formColor = this.cellInfo.markerColor
                        if (formColor === null) {
                            formColor = '#000000'
                        }
                        scene.setPictogramAtCell(this.cellInfo.cellIndex, this.cellInfo.pictogram, formColor)
                    },

                    deleteNpc(event) {
                        scene.deleteNpcAt(this.cellInfo.cellIndex)
                        this.characterCard = null
                    },

                    appendNpc(event) {
                        event.preventDefault()
                        scene.injectNpcAt(this.cellInfo.cellIndex, this.selectedNpc)
                    }

                }))
        })

        const feedbackSocket = new WebSocket('{{ url_feedback }}')
        feedbackSocket.onmessage = function (msg) {
            const relativ = JSON.parse(msg.data)
            const idx = scene.metadata.playerViewOnTileIndex
            if (idx !== null) {
                const ground = scene.metadata.grid[idx]
                scene.movePlayerCursor(ground.x + relativ.deltaX, relativ.deltaY - ground.y)
            }
        }

    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
{% endblock %}
