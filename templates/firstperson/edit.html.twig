{% extends "base.html.twig" %}

{% block title %}{{ place.title }}{% endblock %}

{% block body %}
    <div class="pure-g" x-data="displayCellInfo" x-on:selectcell.window="display($event)">
        <div class="pure-u-1">
            <canvas id="renderCanvas">
            </canvas>
        </div>
        <div class="pure-u-1-5">
            <template x-if="cellInfo !== null">
                <div class="pure-g property">
                    <div class="pure-u-1-3"><label>Distance</label></div>
                    <div class="pure-u-2-3"><p x-on:cursormove.window="cursorMoved($event)" x-text="distanceCursor"></p></div>
                </div>
            </template>
            {{ form(writer) }}
            {% if place.battlemap3d is not empty %}
                <div class="pure-form">
                    <a href="{{ path('app_firstperson_delete', {pk: place.pk}) }}" class="pure-button button-delete pure-input-1">Regénérer la map</a>
                </div>
            {% endif %}
        </div>
        <div class="pure-u-1-5">
            <template x-if="cellInfo !== null">
                <div> 
                    <div class="pure-g property">
                        <div class="pure-u-1-3"><label>Pièce</label></div>
                        <div class="pure-u-2-3">
                            <p>
                                n°<span x-text="cellInfo.uid"></span>
                                index
                                <span x-text="cellInfo.cellIndex"></span>
                            </p>
                        </div>
                    </div>
                    {{ form(texturing) }}
                </div>
            </template>
        </div>
        <div class="pure-u-1-5">
            <template x-if="cellInfo !== null">
                {{ form(legend) }}
            </template>
        </div>
        <div class="pure-u-1-5">
            <template x-if="characterCard !== null">
                <div class="npc-minicard">
                    <p>
                        <i x-bind:class="characterCard.icon"></i>
                        <span x-text="characterCard.title"></span>
                    </p>
                    <div class="pure-g">
                        <template x-for="pic in characterCard.picture">
                            <div class="pure-u-1-6">
                                <div x-data="broadcast">
                                    <a x-bind:href="pic.link" x-bind="trigger">
                                        <img x-bind:src="pic.thumb" class="pure-img"/>
                                    </a>
                                </div>
                            </div>
                        </template>
                    </div>
                    <div class="pure-g actions">
                        <div class="pure-u-1-3">
                            <a x-bind:href="characterCard.sheet" class="pure-button pure-input-1" target="_blank">Feuille</a>
                        </div>
                        <div class="pure-u-1-3">
                            <a x-show="characterCard.instantiate" x-bind:href="characterCard.instantiate" class="pure-button pure-input-1" target="_blank">Instance</a>
                        </div>
                        <div class="pure-u-1-3">
                            <button x-on:click="deleteNpc" class="pure-button button-delete pure-input-1">Delete</button>
                        </div>
                    </div>
                </div>
            </template>
            {{ form(npc_tool) }}
        </div>
        <div class="pure-u-1-5">
            {{ include('fragment/flashes.html.twig') }}
            {{ form(broadcast,{attr: {hidden:true}}) }}
            {{ form(gm_view,{attr: {hidden:true}}) }}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script type="module">
        import Alpine from 'alpinejs';
        import BABYLON from 'babylonjs';
        import battlemapLoader from 'battlemap-loader';
        import broadcastPicture from 'picture-broadcasting';
        Alpine.data('broadcast', broadcastPicture)

        BABYLON.SceneLoader.RegisterPlugin(battlemapLoader)
        const canvas = document.getElementById("renderCanvas") // Get the canvas element
        const engine = new BABYLON.Engine(canvas) // Generate the BABYLON 3D engine

        // Creates Scene object
        const scene = new BABYLON.Scene(engine)

        // Creates and positions a free camera for GM
        const camera = new BABYLON.UniversalCamera("gm-camera", new BABYLON.Vector3(0, 0, 0), scene)
        camera.setTarget(new BABYLON.Vector3(0, 0, -1))
        camera.attachControl(canvas)

        BABYLON.SceneLoader.Append("/fps/scene/", "{{ place.pk }}.battlemap", scene, function (scene) { })

        // Register a render loop to repeatedly render the scene
        engine.runRenderLoop(function () {
            scene.render()
        })
        // Watch for browser/canvas resize events
        window.addEventListener("resize", function () {
            engine.resize()
        })

        Alpine.data('displayCellInfo', () => ({
                cellInfo: null,
                characterCard: null,
                selectedNpc: null,
                distanceCursor: 0,

                display(event) {
                    this.cellInfo = event.detail
                    if (this.cellInfo.npc !== null) {
                        const npc = this.cellInfo.npc
                        fetch('{{ path('app_npcgenerator_minicard') }}?title=' + npc.label)
                                .then(response => {
                                    return response.json()
                                })
                                .then(content => {
                                    this.characterCard = content
                                })
                    } else {
                        this.characterCard = null
                    }
                },

                cursorMoved(event) {
                    // update distance between cursor and selector since cursor has moved
                    this.distanceCursor = scene.getDistance(event.detail.cursor, this.cellInfo.cellIndex)
                },

                write(event) {
                    event.preventDefault()
                    const form = new FormData(event.target)
                    const excluded = ['npcSpritePtr', 'legendPtr']
                    form.set('battlemap3d_write[battlemap3d]', JSON.stringify(scene.metadata, (key, value) => {
                        return (-1 === excluded.indexOf(key)) ? value : undefined
                    }))
                    fetch(event.target.action, {
                        method: 'post',
                        body: form,
                        redirect: 'manual'
                    }).then(function (response) {
                        return response.json()
                    }).then(function (status) {
                        Alpine.store('notif').push(status.level, status.message)
                    })
                },

                setLegend(event) {
                    event.preventDefault()
                    scene.setLegendAtCell(this.cellInfo.cellIndex, this.cellInfo.legend)

                    let formColor = this.cellInfo.markerColor
                    if (formColor === null) {
                        formColor = '#000000'
                    }
                    scene.setPictogramAtCell(this.cellInfo.cellIndex, this.cellInfo.pictogram, formColor)
                },

                deleteNpc(event) {
                    scene.deleteNpcAt(this.cellInfo.cellIndex)
                    this.characterCard = null
                },

                appendNpc(event) {
                    event.preventDefault()
                    scene.injectNpcAt(this.cellInfo.cellIndex, this.selectedNpc)
                },

                texturing(event) {
                    event.preventDefault()
                    scene.paintRoomAt(this.cellInfo.cellIndex, this.cellInfo.template)
                },

                subscribePicture(img) {
                    subscribePicture(img)
                }

            }))

        const feedbackSocket = new WebSocket('{{ url_feedback }}')
        feedbackSocket.onmessage = function (msg) {
            const position = JSON.parse(msg.data)

            switch (position.mode) {
                case 'relative':
                    const idx = scene.metadata.playerViewOnTileIndex
                    if (idx !== null) {
                        const ground = scene.metadata.grid[idx]
                        scene.movePlayerCursor(ground.x + position.deltaX, position.deltaY - ground.y)
                    }
                    break

                case 'indexed':
                    const ground = scene.metadata.grid[parseInt(position.cell)]
                    scene.movePlayerCursor(ground.x, -ground.y)
                    break
            }
        }
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #renderCanvas {
            width: 100%;
            height: 720px;
            touch-action: none;
        }

        .property .pure-u-1-3 label {
            text-align: right;
            margin: 0.4em 1em 0.4em 0;
            display: block;
        }
        .property .pure-u-2-3 p {
            margin: 0.4em 0;
        }

        .npc-minicard {
            margin: 0 0.4em;
        }
        .npc-minicard p {
            font-size: 120%;
            margin: 0.4em 0;
        }
        .npc-minicard .actions {
            margin-top: 0.2em;
            text-align: center;
        }
    </style>
{% endblock %}
