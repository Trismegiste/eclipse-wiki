{# show battlemap #}
{% extends "base.html.twig" %}

{% block title %}Running {{ title }}{% endblock %}

{% block body %}
    <div x-data="spa" class="pure-g">
        <div class="pure-u-3-4">
            <div id="map">{{ svg|raw }}</div>
        </div>
        <div class="pure-u-1-4">
            <input type="checkbox" x-model="fogEnabled" x-on:change="toggleFog"/>
            <input type="text" x-model="legendFilter" x-on:blur="searchLegend"/>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('svgdotjs/svg.min.js') }}"></script>
    <script src="{{ asset('svgdotjs/svg.panzoom.min.js') }}"></script>
    <script src="{{ asset('svgdotjs/svg.draggable.min.js') }}"></script>
    <script>

        document.addEventListener('alpine:init', () => {
            Alpine.data('spa', () => ({
                    battlemap: null,
                    fogEnabled: true,
                    legendFilter: null,

                    init() {
                        let svgElem = document.querySelector('#map svg')
                        this.battlemap = SVG(svgElem)
                        this.battlemap.panZoom({zoomMin: 5, zoomMax: 100, zoomFactor: 0.2})

                        // remove fog of war for one room on a double click event
                        document.querySelectorAll('#map g.fog-of-war').forEach(function (item) {
                            item.addEventListener('dblclick', function (e) {
                                item.remove()
                            })
                        })

                        // keys
                        var model = this
                        Mousetrap.bind('p', function () {
                            const formData = new FormData()
                            formData.append('svg', new Blob([model.battlemap.svg()], {type: 'image/svg+xml'}))

                            fetch('{{ path('app_voronoicrud_pushplayerview') }}', {
                                method: 'post',
                                body: formData,
                                redirect: 'manual'
                            }).then(function (response) {
                                return response.json()
                            }).then(function (json) {
                                console.log(json.message)
                            })
                        })
                    },

                    toggleFog() {
                        let fogLayer = document.querySelector('#map #gm-fogofwar')
                        fogLayer.setAttribute('class', this.fogEnabled ? '' : 'disabled-fog')
                    },

                    searchLegend() {
                        let xpath = '//svg:svg/svg:g[@id="legend"]/svg:text[contains(text(),"' + this.legendFilter + '")]'
                        let legend = document.evaluate(xpath, document, function (prefix) {
                            const ns = {
                                'xhtml': 'http://www.w3.org/1999/xhtml',
                                'svg': 'http://www.w3.org/2000/svg'
                            }
                            return ns[prefix] || null
                        }, XPathResult.ANY_UNORDERED_NODE_TYPE)
                                .singleNodeValue

                        if (legend) {
                            console.log(legend.getAttribute('x'), legend.getAttribute('y'))
                        }
                    }
                }))
        })


        {#
            var battlemap
            var colorCycle = 0
            const palette = ['Red', 'DarkOrange', 'Yellow', 'Magenta', 'DarkViolet', 'Lime', 'MediumSeaGreen', 'Aqua', 'DeepSkyBlue', 'RosyBrown']

            fetch('{{ img|raw }}', {
                redirect: 'manual'
            }).then(function (response) {
                if (!response.ok) {
                    return Promise.reject(response.statusText);
                }
                return response.text()
            }).then(function (svg) {

                // make all NPC draggable
                document.querySelectorAll('svg #token-layer circle').forEach(function (item) {
                    SVG(item).draggable()
                })

            }).catch((error) => {
                console.error(error);
            })

            Mousetrap.bind('t', function () {
                let bbox = battlemap.viewbox()
                battlemap.circle(0.6)
                        .fill(palette[colorCycle % palette.length])
                        .move(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2)
                        .draggable()
                colorCycle++
                return false
            })

            #}
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .disabled-fog {
            opacity: 0.33;
        }
    </style>
{% endblock %}