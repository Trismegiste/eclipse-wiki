{# show battlemap #}
{% extends "base.html.twig" %}

{% block title %}Running {{ title }}{% endblock %}

{% block body %}
    <div id="map"></div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('svgdotjs/svg.min.js') }}"></script>
    <script src="{{ asset('svgdotjs/svg.panzoom.min.js') }}"></script>
    <script src="{{ asset('svgdotjs/svg.draggable.min.js') }}"></script>
    <script>
        var battlemap
        var colorCycle = 0
        const palette = ['Red', 'DarkOrange', 'Yellow', 'Magenta', 'DarkViolet', 'Lime', 'MediumSeaGreen', 'Aqua', 'DeepSkyBlue', 'RosyBrown']

        fetch('{{ img|raw }}', {
            redirect: 'manual'
        }).then(function (response) {
            if (!response.ok) {
                return Promise.reject(response.statusText);
            }
            return response.text()
        }).then(function (svg) {
            document.getElementById('map').innerHTML = svg

            // remove fog of war for one room on a double click event
            document.querySelectorAll('#map g.fog-of-war').forEach(function (item) {
                item.addEventListener('dblclick', function (e) {
                    e.target.parentNode.remove() // since the <g> is only a group, <rect> inside the <g> are catching the event
                })
            })

            // Pan & zoom the SVG
            let svgElem = document.querySelector('#map svg')
            battlemap = SVG(svgElem)
            battlemap.panZoom({zoomMin: 5, zoomMax: 100, zoomFactor: 0.2})

            // make all NPC draggable
            document.querySelectorAll('svg #token-layer circle').forEach(function (item) {
                SVG(item).draggable()
            })

        }).catch((error) => {
            console.error(error);
        })

        Mousetrap.bind('t', function () {
            let bbox = battlemap.viewbox()
            battlemap.circle(0.6)
                    .fill(palette[colorCycle % palette.length])
                    .move(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2)
                    .draggable()
            colorCycle++
            return false
        })

        Mousetrap.bind('p', function () {
            const formData = new FormData()
            formData.append('svg', new Blob([battlemap.svg()], {type: 'image/svg+xml'}))

            fetch('{{ path('app_mapcrud_pushplayerview') }}', {
                method: 'post',
                body: formData,
                redirect: 'manual'
            }).then(function (response) {
                return response.json()
            }).then(function (json) {
                console.log(json.message)
            })
        })
    </script>
{% endblock %}