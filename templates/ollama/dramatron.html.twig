{% extends 'base.html.twig' %}

{% block title %}Dramatron{% endblock %}
{% block header_title %}
    {{ block('title') }}
{% endblock %}

{% block content %}
    <div class="pure-g" x-data="dramatron('{{ ollama_api }}')">
        <div class="pure-u-1-5">
            <ul>
                <template x-for="char in scenario.character">
                    <li x-text="char.title"></li>
                </template>
            </ul>
        </div>
        <div class="pure-u-3-5">
            <form class="pure-form" x-on:submit.prevent="generate">
                <fieldset>
                    <h2>Pitch</h2>
                    <textarea x-model="scenario.pitch" class="pure-input-1" rows="4"></textarea>
                    <button class="pure-button">Générer</button>
                    <h2>Sortie LLM</h2>
                    <textarea x-model="result" class="pure-input-1" rows="30"></textarea>
                </fieldset>
            </form>
        </div>
        <div class="pure-u-1-5">
            <ul>
                <template x-for="place in scenario.place">
                    <li x-text="place.title"></li>
                </template>
            </ul>
        </div>
        <div class="pure-u-1">
            <template x-if="scenario.pitch">
                <section>
                    <h2>Pitch</h2>
                    <article x-text="scenario.pitch">
                    </article>
                </section>
            </template>
            <template x-if="scenario.story">
                <section>
                    <h2>Développement</h2>
                    <article x-text="scenario.story">
                    </article>
                </section>
            </template>
            <template x-for="scene, idx in scenario.scene">
                <section>
                    <h2 x-text="'Acte ' + idx"></h2>
                    <article x-text="scene">
                    </article>
                </section>
            </template>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="application/json" id="init-payload">
        {{ payload|json_encode()|raw }}
    </script>
    <script type="module">
        import { Ollama } from 'ollama/browser';
        class Scenario {
            title = null
            pitch = null
            story = null
            character = []
            place = []
            scene = []
        }

        Alpine.data('dramatron', url => ({
                ollama: null,
                scenario: null,
                result: '',

                init() {
                    this.scenario = new Scenario()
                    this.ollama = new Ollama({host: url})
                },

                async generate(event) {
                    let payload = this.getDefaultPayload()
                    payload.messages[1].content = payload.messages[1].content
                            + this.scenario.pitch
                            + "\nDéveloppe ce synopsis en 5 actes"

                    // Expansion of the pitch
                    this.result = ''
                    await this.printAnswer(payload)
                    this.scenario.story = this.result
                    payload.messages[2] = {role: 'assistant', content: this.scenario.story}

                    // 5 acts expansion
                    for (let k = 1; k <= 5; k++) {
                        payload.messages.push({role: 'user', content: `Développe sur 5 scènes, en incluant une scène d'action, l'acte ${k} de ton synopsis`})
                        await this.printAnswer(payload)
                        payload.messages.push({role: 'assistant', content: this.result})
                        this.scenario.scene[k] = this.result
                    }

                    console.log(this.scenario)
                },

                getDefaultPayload() {
                    let p = JSON.parse(document.getElementById('init-payload').textContent)
                    p.options.num_ctx = 30000

                    return p
                },

                async printAnswer(payload) {
                    this.result = ''
                    const response = await this.ollama.chat(payload)
                    for await (const part of response) {
                        this.waiting = false
                        this.result = this.result.concat(part.message.content)
                    }
                }
            }))
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        fieldset h2:nth-child(1) {
            margin-top: 0;
        }
    </style>
{% endblock %}
