{# Search into InvokeAI images for appending to vertex #}
{% extends "invokeai/search.html.twig" %}

{% block title %}Append picture{% endblock %}
{% block header_title %}{{ vertex.title }}{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="module">
        import stableDiffusion from 'sd-gallery-search';

        Alpine.data('stableDiffusion', (source, url) => {
            let obj = stableDiffusion(source, url)

            obj.linkParameter = function (picture) {
                const param = new URLSearchParams({
                    storage: this.source,
                    pic: picture.name,
                    query: this.query
                })
                const href = '{{ path('app_invokeaipicture_vertexappend', {pk: vertex.pk}) }}?' + param
                return {
                    href,
                    title: picture.prompt
                }
            }

            return obj
        })
    </script>
{% endblock %}

{% block info %}
    {{ parent() }}
    <section class="last-picture" x-data="lastPicture('{{ path('app_invokeaipicture_ajaxlastpicture') }}')">
        <div class="pure-g">
            <template x-for="picture in gallery" :key="picture.thumb">
                <div class="pure-u-1-3">
                    <a x-bind:href="getLink(picture)">
                        <img x-bind:src="picture.thumb" class="pure-img"/>
                    </a>
                </div>
            </template>
        </div>
    </section>

    <script type="module">
        Alpine.data('lastPicture', (url) => ({
                gallery: [],

                async init() {
                    try {
                        const resp = await fetch(url)
                        if (!resp.ok) {
                            throw new Error('Last InvokeAI pictures unreachable')
                        }
                        this.gallery = await resp.json()
                    } catch (e) {
                        console.error(e.message)
                    }
                },

                getLink(picture) {
                    const param = new URLSearchParams({
                        storage: 'remote',
                        pic: picture.name,
                        query: 'last'
                    })

                    return '{{ path('app_invokeaipicture_vertexappend', {pk: vertex.pk}) }}?' + param
                }
            }))
    </script>
{% endblock %}