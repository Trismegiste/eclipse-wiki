{# Player peering #}
{% extends "base.html.twig" %}
{% form_theme(form) _self %}

{% block title %}Validation appairage{% endblock %}
{% block header_title %}{{ block('title') }}{% endblock %}

{% block content %}
    <div class="pure-g" x-data="peering('{{ mercure('peering') }}', '{{ player_peering }}')">
        <div class="pure-u-1-2">
            {{ form(form) }}
        </div>
        <div class="pure-u-1-2">
            <figure>
                <canvas x-ref="qrious" class="pure-img"></canvas>
            </figure>
            <h2 class="big-link">
                {{ player_peering }}
                <a href="{{ player_peering }}" target="_blank"><i class="icon-export"></i></a>
            </h2>
        </div>
    </div>
{% endblock %}

{% block _peering_confirm_key_widget %}
    <template x-for="user in player" :key="user.identifier">
        <label>
            <input type="radio" name="{{ form.vars.full_name }}" x-bind:value="user.identifier" required/>
            <span x-text="user.identifier"></span>
            (<span x-text="user.browser"></span> from <span x-text="user.ip"></span>)
        </label>
    </template>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="module">
        import QRious from 'qrious';

        Alpine.data('peering', (mercureHost, playerPeeringUrl) => ({
                host: mercureHost,
                socket: null,
                player: [],
                qrCodeUrl: playerPeeringUrl,

                init() {
                    // QR code
                    new QRious({
                        element: this.$refs.qrious,
                        size: Math.min(innerWidth, innerHeight),
                        level: 'M',
                        value: playerPeeringUrl
                    })

                    // SSE Socket
                    this.socket = new EventSource(this.host)
                    // listen to requests from players (proxyed by symfony)
                    this.socket.addEventListener('ask', (msg) => {
                        console.log('Request peering from player')
                        console.log(msg.data)
                        this.player.push(JSON.parse(msg.data))
                    })
                },

                validation(event) {
                    const form = event.currentTarget
                    const formContent = new FormData(form)
                    fetch(form.action, {
                        method: 'post',
                        body: formContent,
                        redirect: 'manual'
                    }).then(response => {
                        return response.json()
                    }).then(status => {
                        Alpine.store('notif').push(status.level, status.message)
                        const idx = this.searchPlayerIndexByIdentifier(status.remove)
                        if (idx !== null) {
                            this.player.splice(idx, 1)
                        }
                    })
                },

                searchPlayerIndexByIdentifier(key) {
                    for (let index = 0; index < this.player.length; index++) {
                        if (key === this.player[index].identifier) {
                            return index
                        }
                    }
                    return null
                }

            }))
    </script>
{% endblock %}

{% block stylesheets %}
    <style>
        .big-link {
            text-align: center;
            font-size: 150%;
        }
        figure {
            margin: 1em 2em;
        }
        #peering_confirm .form-widget label {
            display: block;
            margin: 0.2em;
        }
    </style>
{% endblock %}
