{# Custom rendering for tree with autocompleted wikitext links #}
{% block wiki_tree_widget %}
    {{ form_widget(form) }}
    <div id="{{ form.vars.id }}_tree" class="tree_widget"></div>
    <textarea id="{{ form.vars.id }}_edit" class="pure-input-1" hidden="true"></textarea>
    <script>
        window.addEventListener('load', () => {
            if (typeof SortableTree === "undefined") {
                throw new Error('SortableTree is not included')
            }

            const hiddenTree = document.getElementById('{{ form.vars.id }}')
            const editArea = document.getElementById('{{ form.vars.id }}_edit')
            let nodeData = [{{ form.vars.data|raw }}][0]
            let currentlyEditedNode = null

            const tree = new SortableTree({
                nodes: [nodeData],
                element: document.getElementById('{{ form.vars.id }}_tree'),
                initCollapseLevel: 4,
                {% if form.vars.state_key is defined %}
                    stateId: '{{ form.vars.state_key }}',
                {% endif %}
                renderLabel: (data) => {
                    let state = data.finished ? 'finished-node' : ''
                    return `<span class="${state}">${data.title}</span>
                                <button class="pure-button"><i class="icon-edit"></i></button>
                                <button class="pure-button"><i class="icon-newchild"></i></button>
                                <button class="pure-button button-delete"><i class="icon-trash-empty"></i></button>
                                <button class="pure-button"><i class="icon-archive"></i></button>`
                },
                onChange: ({ nodes, movedNode, srcParentNode, targetParentNode }) => {
                    nodeData = dumpTree(nodes[0])
                    hiddenTree.value = JSON.stringify(nodeData)
                },
                onClick: (event, node) => {
                    // node.label.querySelector('span').innerHTML += ' yolo'
                    // node.data.title += ' yolo'
                }
            })

            document.querySelectorAll('#{{ form.vars.id }}_tree i.icon-newchild').forEach(elem => {
                let button = elem.parentElement
                button.addEventListener('click', event => {
                    let node = button.parentElement.parentElement
                    let newChild = {data: {title: 'New child', finished: false}, nodes: []}
                    let originalNode = backtrackOriginalNodeWithData(nodeData, node.data)
                    originalNode.nodes.push(newChild)
                    hiddenTree.value = JSON.stringify(nodeData)
                })
            })

            document.querySelectorAll('#{{ form.vars.id }}_tree i.icon-trash-empty').forEach(elem => {
                let button = elem.parentElement
                button.addEventListener('click', event => {
                    let node = button.parentElement.parentElement
                    let parentNode = node.parentElement.parentElement
                    let originalNode = backtrackOriginalNodeWithData(nodeData, node.data)
                    let originalParentNode = backtrackOriginalNodeWithData(nodeData, parentNode.data)
                    let idx = originalParentNode.nodes.indexOf(originalNode)
                    originalParentNode.nodes.splice(idx, 1)
                    hiddenTree.value = JSON.stringify(nodeData)
                })
            })

            document.querySelectorAll('#{{ form.vars.id }}_tree i.icon-edit').forEach(elem => {
                let button = elem.parentElement
                button.addEventListener('click', event => {
                    event.preventDefault()
                    let node = button.parentElement.parentElement
                    editArea.hidden = false
                    editArea.focus()
                    editArea.value = node.data.title
                    currentlyEditedNode = node
                })
            })

            editArea.addEventListener('blur', event => {
                currentlyEditedNode.data.title = editArea.value
                currentlyEditedNode.label.querySelector('span').innerHTML = editArea.value
                hiddenTree.value = JSON.stringify(nodeData)
                editArea.value = ''
                editArea.hidden = true
                currentlyEditedNode = null
            })

            document.querySelectorAll('#{{ form.vars.id }}_tree i.icon-archive').forEach(elem => {
                let button = elem.parentElement
                button.addEventListener('click', event => {
                    let node = button.parentElement.parentElement
                    let originalNode = backtrackOriginalNodeWithData(nodeData, node.data)
                    originalNode.data.finished = !originalNode.data.finished
                    hiddenTree.value = JSON.stringify(nodeData)
                })
            })

            function dumpTree(elem) {
                let dump = {data: tree.getNode(elem.id).data, nodes: []}
                for (let child of elem.subnodes) {
                    dump.nodes.push(dumpTree(child))
                }

                return dump
            }

            function backtrackOriginalNodeWithData(node, data) {
                if (node.data === data) {
                    return node
                }

                for (let child of node.nodes) {
                    let found = backtrackOriginalNodeWithData(child, data)
                    if (found !== null) {
                        return found
                    }
                }

                return null
            }

            if (typeof Textcomplete === "undefined") {
                throw new Error('Yuku TextComplete is required')
            }

            let Textarea = Textcomplete.editors.Textarea
            let editor = new Textarea(editArea)
            let textcomplete = new Textcomplete(editor)
            textcomplete.register([{
                // Link strategy for Vertex
                match: /(.*)\[\[([^\]]+)$/,
                search: function (term, callback) {
                    fetch('{{ path('app_vertexcrud_search') }}' + '?q=' + term)
                            .then((response) => {
                                return response.json()
                            })
                            .then((data) => {
                                callback(data)
                            })
                },
                replace: function (value) {
                    return '$1[[' + value + ']] '
                }
            }])
        })
    </script>
{% endblock %}
