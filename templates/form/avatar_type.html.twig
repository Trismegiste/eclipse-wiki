{# Custom rendering for AvatarType #}
{% block avatar_row %}
    <div x-data="pictureCropper({{ form.vars.avatar_size }})" x-on:picture.window="bindPicture($event.detail)">
        {{ form_row(form) }}
        <div x-ref="cropperWidget" x-on:update="update" data-default-picture="{{ form.vars.default_picture }}"></div>
    </div>
    <script type="module">
        import avatarType from 'avatar-type';
        Alpine.data('pictureCropper', avatarType)
    </script>
{% endblock %}

{% block multicultural_avatar_row %}
    {% set avatarSize = 500 %}
    <div class="pure-g">
        {% for avatar_name in choices %}
            <div x-data="multicultural('{{ avatar_name.value }}', {{ avatarSize }})" class="avatar-sample pure-u-1-3">
                <img width="100" height="100" x-on:click="select"/>
                <canvas height="{{ avatarSize }}" width="{{ avatarSize }}" style="display:none"></canvas>
            </div>
        {% endfor %}
    </div>
    <script type="module">
        import multiavatar from '@multiavatar/multiavatar';

        Alpine.data('multicultural', (seed, size) => ({
                avatarId: seed,
                avatarSize: size,

                init() {
                    let hiddenCanvas = this.$el.querySelector('canvas')
                    let button = this.$el.querySelector('img')
                    let ctx = hiddenCanvas.getContext('2d')
                    let imgTmp = new Image()
                    imgTmp.onload = function () {
                        ctx.drawImage(this, 0, 0)
                    }
                    let svgCode = multiavatar(this.avatarId)

                    // updating image
                    imgTmp.src = svgContentToDataUrl(fixSvgDimension(svgCode, this.avatarSize))
                    button.src = imgTmp.src
                },

                // event for choosing avatar
                select(e) {
                    window.dispatchEvent(new CustomEvent('picture', {
                        bubbles: true,
                        detail: {dataUrl: e.target.parentNode.querySelector('canvas').toDataURL()}
                    }))
                }
            }))
    </script>
{% endblock %}

{% block internal_avatar_row %}
    <div class="pure-g">
        {% for picture in choices %}
            <div class="avatar-sample pure-u-1-3" x-data="selfContent">
                <img class="pure-img" src="{{ path('get_picture', {title: picture.value}) }}" x-on:click="select"/>
            </div>
        {% endfor %}
    </div>
    <script type="module">
        Alpine.data('selfContent', () => ({
                select(event) {
                    window.dispatchEvent(new CustomEvent('picture', {
                        bubbles: true,
                        detail: {dataUrl: event.target.src}
                    }))
                }
            }))
    </script>
{% endblock %}

{% block invokeai_avatar_row %}
    <div class="pure-g" x-data="invokeAi">
        <div class="pure-u-1">
            {{ form_widget(form) }}
        </div>
        <template x-for="pic in getListing()" :key="pic.name">
            <div class="avatar-sample pure-u-1-3">
                <img class="pure-img" x-bind:src="pic.thumb" x-on:click="select"/>
            </div>
        </template>
    </div>
    <script type="module">
        Alpine.data('invokeAi', () => ({
                query: null,

                async getListing() {
                    if ((this.query === null) || (this.query.length === 0)) {
                        return []
                    }

                    const resp = await fetch('/invokeai/ajax/local/search?q=' + this.query)
                    if (!resp.ok) {
                        throw new Error(this.source, {cause: await resp.json()})
                    }
                    return await resp.json()
                },

                select(event) {
                    window.dispatchEvent(new CustomEvent('picture', {
                        bubbles: true,
                        detail: {dataUrl: event.target.src}
                    }))
                }
            }))
    </script>
{% endblock %}

{% block bauhaus_avatar_row %}
    <div class="pure-g" x-data="boringAvatar">
        {% for avatar in choices %}
            <div class="pure-u-1-3 avatar-sample bauhaus" x-on:click="select">
                {{ avatar.value|raw }}
            </div>
        {% endfor %}
    </div>
    <script type="module">
        Alpine.data('boringAvatar', () => ({
                select(event) {
                    window.dispatchEvent(new CustomEvent('picture', {
                        bubbles: true,
                        detail: {dataUrl: svgContentToDataUrl(fixSvgDimension(event.currentTarget.innerHTML, 128))}
                    }))
                }
            }))
    </script>
    <style>
        .bauhaus svg {
            max-width: 100px;
            max-height: 100px;
        }
    </style>
{% endblock %}

{% block avatar_multisource_row %}
    {% set sources = ['internal','invokeai','multicultural','bauhaus'] %}
    <div x-data="{ panel: 0 }" class="multisource-widget">
        <div class="pure-menu pure-menu-horizontal">
            <ul class="pure-menu-list">
                {% for idx, source in sources %}
                    <li class="pure-menu-item">
                        <a href="#" class="pure-menu-link" x-on:click="panel={{ idx }}">{{ (source ~ '_avatar_panel') |trans }}</a>
                    </li>
                {% endfor %}
            </ul>
        </div>
        {% for idx, source in sources %}
            <div x-show="panel==={{ idx }}">
                {{ form_row(form[source]) }}
            </div>
        {% endfor %}
    </div>
    <style>
        .multisource-widget .pure-menu-horizontal {
            margin-bottom: 1em;
        }

        .avatar-sample {
            text-align: center;
        }

        .avatar-sample img, .avatar-sample svg {
            cursor: zoom-in;
        }
    </style>
{% endblock %}
