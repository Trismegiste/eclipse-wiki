{% extends "base.html.twig" %}
{% form_theme form _self %}

{% block header_title %}
    {{ include('npc/menu.html.twig', {npc: form.vars.data}) }}
{% endblock %}

{% block _npc_attacks_attacks_widget %}
    <div id="{{ form.vars.id }}" class="collection">
        <template x-for="(attack, idx) in attacks">

            <div class="pure-g">
                <div class="pure-u-1-2">
                    {{ form_widget(form.vars.prototype.title, {
                        attr: {
                            'x-bind:name': "'npc_attacks[attacks][' + idx + '][title]'",
                            'x-model': "attack.title",
                            'class': 'pure-input-1 highlight',
                            placeholder: 'Titre de l\'attaque'
                        } 
                    }) }}
                </div>
                <div class="pure-u-1-4">
                    {{ form_widget(form.vars.prototype.reach, {
                        attr: {
                            'x-bind:name': "'npc_attacks[attacks][' + idx + '][reach]'",
                            'x-model': "attack.reach"
                        } 
                    }) }}
                </div>
                <nav class="pure-u-1-4">
                    <a x-on:click="removeAttack(idx)"><i class="icon-trash-empty"></i></a>
                </nav>
                <div class="pure-u-1-1">
                    {{ form_widget(form.vars.prototype.rateOfFire, {
                        attr: {
                            'x-bind:name': "'npc_attacks[attacks][' + idx + '][rateOfFire]'",
                            'x-model': "attack.rateOfFire"
                        } 
                    }) }}
                    ×
                    <label x-text="attack.roll.name"></label>
                    {{ form_widget(form.vars.prototype.roll.name, {
                        attr: {
                            'x-bind:name': "'npc_attacks[attacks][' + idx + '][roll][name]'",
                            'x-model': "attack.roll.name"
                        } 
                    }) }}
                    {{ form_widget(form.vars.prototype.roll.roll, {
                        attr: {
                            'x-bind:name': "'npc_attacks[attacks][' + idx + '][roll][roll]'",
                            'x-bind:value': "attack.roll.dice + attack.roll.modifier"
                        } 
                    }) }}     
                    +
                    {{ form_widget(form.vars.prototype.rollBonus, {
                        attr: {
                            'x-bind:name': "'npc_attacks[attacks][' + idx + '][rollBonus]'",
                            'x-model': "attack.rollBonus"
                        } 
                    }) }}                    
                </div>
                <div class="pure-u-1-1">
                    {{ form_widget(form.vars.prototype.damage, {
                        attr: {
                            'x-bind:name': "'npc_attacks[attacks][' + idx + '][damage]'",
                            'x-bind:value': "damageToString(attack.damage)"
                        } 
                    }) }}
                    PA
                    {{ form_widget(form.vars.prototype.armorPiercing, {
                        attr: {
                            'x-bind:name': "'npc_attacks[attacks][' + idx + '][armorPiercing]'",
                            'x-model': "attack.armorPiercing"
                        } 
                    }) }}
                </div>
            </div>
        </template>
    </div>
{% endblock %}

{% block _npc_attacks_armors_widget %}
    <div id="{{ form.vars.id }}" class="collection">
        <template x-for="(armor, idx) in armors">

            <div class="pure-g">
                <div class="pure-u-3-4">
                    {{ form_widget(form.vars.prototype.name, {
                        attr: {
                            'x-bind:name': "'npc_attacks[armors][' + idx + '][name]'",
                            'x-model': "armor.name",
                            'class': 'pure-input-1 highlight',
                            placeholder: 'Nom de l\'armure'
                        } 
                    }) }}
                </div>
                <nav class="pure-u-1-4">
                    <a x-on:click="removeArmor(idx)"><i class="icon-trash-empty"></i></a>
                </nav>
                <div class="pure-u-1-3">
                    {{ form_widget(form.vars.prototype.protect, {
                        attr: {
                            'x-bind:name': "'npc_attacks[armors][' + idx + '][protect]'",
                            'x-model': "armor.protect",
                            placeholder: 'Protection'
                        } 
                    }) }}
                </div>
                <div class="pure-u-1-3">
                    {{ form_widget(form.vars.prototype.special, {
                        attr: {
                            'x-bind:name': "'npc_attacks[armors][' + idx + '][special]'",
                            'x-model': "armor.special",
                            'placeholder': 'Spécial'
                        } 
                    }) }}
                </div>  
                <div class="pure-u-1-3">
                    {{ form_widget(form.vars.prototype.zone, {
                        attr: {
                            'x-bind:name': "'npc_attacks[armors][' + idx + '][zone]'",
                            'x-model': "armor.zone",
                            placeholder: 'Zone'
                        } 
                    }) }}
                </div>
            </div>
        </template>
    </div>
{% endblock %}


{% block content %}
    <div x-data="{{ form.vars.data|json_encode()|escape('html_attr') }}">
        {{ form(form, {attr: {'x-data': 'behavior'}}) }}
    </div>
{% endblock %}


{% block javascripts %}
    {{ parent() }}
    <script type="module">
        Alpine.data('behavior', () => ({
                getSkill(name) {
                    for (let idx = 0; idx < this.skills.length; idx++) {
                        let skill = this.skills[idx]
                        if (skill.name === name) {
                            return skill
                        }
                    }

                    return {dice: 4, modifier: -2}
                },
                getSaWoAttribute(name) {
                    for (let idx = 0; idx < this.attributes.length; idx++) {
                        let attr = this.attributes[idx]
                        if (attr.name === name) {
                            return attr
                        }
                    }
                },
                damageToString(damage) {
                    let str = []
                    Object.keys(damage.diceCount).forEach(function (key, index) {
                        let val = damage.diceCount[key]
                        if (val > 0) {
                            str.push(val + 'd' + key)
                        }
                    })
                    if (damage.bonus > 0) {
                        str.push(damage.bonus)
                    }

                    return str.join('+')
                },
                addMeleeWeapon(ev) {
                    let weapon = JSON.parse(ev.target.value)
                    let dmg = weapon.damage
                    let strength = this.getSaWoAttribute('Force')
                    dmg.diceCount[strength.dice]++
                    let fighting = this.getSkill("Combat")

                    this.attacks.push({
                        title: weapon.name,
                        roll: {
                            name: "Combat",
                            dice: fighting.dice,
                            modifier: fighting.modifier
                        },
                        armorPiercing: weapon.ap,
                        reach: 'Mêlée',
                        rollBonus: 0,
                        rateOfFire: 1,
                        damage: dmg
                    })

                    ev.target.value = ""

                },
                addRangedWeapon(ev) {
                    let weapon = JSON.parse(ev.target.value)
                    let shooting = this.getSkill("Tir")

                    this.attacks.push({
                        title: weapon.name,
                        roll: {
                            name: "Tir",
                            dice: shooting.dice,
                            modifier: shooting.modifier
                        },
                        armorPiercing: weapon.ap,
                        reach: weapon.reach,
                        rollBonus: 0,
                        rateOfFire: weapon.rof,
                        damage: weapon.damage
                    })

                    ev.target.value = ""

                },
                removeAttack(k) {
                    this.attacks.splice(k, 1)
                },
                addArmor(ev) {
                    let armor = JSON.parse(ev.target.value)
                    this.armors.push(armor)
                    ev.target.value = ""
                },
                removeArmor(k) {
                    this.armors.splice(k, 1)
                }
            }))

        Alpine.start()
    </script>
{% endblock %}