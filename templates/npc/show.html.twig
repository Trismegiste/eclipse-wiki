{% extends "vertex/show.html.twig" %}
{% set npc = vertex %}
{% macro print_trait(trait, rof = 1, bonus = 0) %}
    <button x-on:click="$dispatch('roll', { dice: {{ trait.dice }}, modifier: {{ trait.modifier + bonus }}, rof: {{ rof }} })"
            class="pure-button {{ trait.altered ? 'modified-roll' : ''}}">
        d{{ trait.dice }}
        {% set delta = trait.modifier + bonus %}
        {% if delta > 0 %}
            + {{ delta }}
        {% endif %}
        {% if delta < 0 %}
            - {{ -delta }}
        {% endif %}
    </button>
{% endmacro %}

{% macro print_damage(damage) %}
    <button class="pure-button" x-on:click="$dispatch('damage', {{ damage|json_encode() }} )">
        {{ damage }}
    </button>
    <button class="pure-button" x-on:click="$dispatch('damage', {{ add_raise(damage)|json_encode() }} )">
        +d6
    </button>
{% endmacro %}

{% block header_title %}
    {{ include('npc/menu.html.twig') }}
{% endblock %}

{% block info %}
    <div x-data="{}">
        <h2>Lancer de trait</h2>
        <div class="diceroller" 
             x-data="traitroller" 
             x-on:roll.window="rolling($event)">
            <div x-show="dice">
                <span x-show="rateOfFire > 1" x-text="rateOfFire + '×'"></span>
                <i x-bind:class="'icon-d' + dice"></i>
                <i class="icon-d6" x-bind:class="{ 'extra-dice': !wildcard }"></i>
                <span x-show="modifier > 0" x-text="'+' + modifier"></span>
                <span x-show="modifier < 0" x-text="modifier"></span>
            </div>
            <div x-show="(dice !== null) && (result === null)" class="roll-result">
                <i class="icon-spin3 animate-spin"></i>
            </div>
            <div x-show="(dice !== null) && (result !== null)" class="roll-result">
                <template x-for="roll in result">
                    <div x-text="roll" x-bind:class="{ fumble: roll===1 }"></div>
                </template>
            </div>        
        </div>    
        <h2>Lancer de dégâts</h2>
        <div class="diceroller" 
             x-data="damageroller" 
             x-on:damage.window="rollDamage($event)">
            <div x-show="dice">
                <template x-for="(cnt,side) in dice">
                    <template x-for="i in cnt">
                        <i x-bind:class="'icon-d' + side"></i>
                    </template>
                </template>
                <span x-show="modifier > 0" x-text="'+' + modifier"></span>
            </div>
            <div x-show="(dice !== null) && (result === null)" class="roll-result">
                <i class="icon-spin3 animate-spin"></i>
            </div>
            <div x-show="(dice !== null) && (result !== null)" x-text="result" class="roll-result">
            </div>        
        </div>
    </div>
    {{ parent() }}    
{% endblock %}

{% block content %}
    <div class="character-show" x-data="{}">
        <div class="pure-g">
            <div class="pure-u-1 pure-u-xl-1-4">
                {% block attributes_dice %}
                    <h2>Attributs</h2>
                    <table class="pure-table">
                        {% for attr in npc.attributeRolls %}
                            <tr>
                                <td>{{ attr.label }}</td>
                                <td>{{ _self.print_trait(attr) }}</td>
                            </tr>
                        {% endfor %}
                    </table>
                {% endblock %}
            </div>
            <div class="pure-u-1 pure-u-xl-1-4">
                {% block skills_dice %}
                    <h2>Compétences</h2>
                    <table class="pure-table">
                        {% for skill in npc.skillRolls %}
                            <tr>
                                <td>{{ skill.label }}</td>
                                <td>{{ _self.print_trait(skill) }}</td>
                            </tr>
                        {% endfor %}
                    </table>
                {% endblock %}
            </div>
            <div class="pure-u-1 pure-u-xl-1-4">
                {% block abilities_list %}
                {% endblock %}
            </div>
            <div class="pure-u-1 pure-u-xl-1-4">
                {% if npc.tokenPic is not empty %}
                    <img src="{{ path('get_picture', {title: npc.tokenPic}) }}" class="pure-img"/>
                {% endif %}
                <h2>Carac. 2<sup>ndaires</sup></h2>
                <table class="pure-table">
                    <tr>
                        <td>Parade</td>
                        <td>{{ npc.parry }}</td>
                    </tr>
                    <tr>
                        <td>Malus distance</td>
                        <td>{{ npc.rangedMalus }}</td>
                    </tr>
                    <tr>
                        <td>Résistance</td>
                        <td>{{ npc.toughness }} ({{ npc.totalArmor }})</td>
                    </tr>
                    <tr>
                        <td>Sécurité</td>
                        <td>{{ npc.security }}</td>
                    </tr>
                </table>
                <h2>Armures</h2>
                <table class="pure-table">
                    {% for item in npc.armors %}
                        <tr>
                            <td>{{ item.name }}</td>
                            <td>{{ item.protect }} {{ item.special }}</td>
                            <td class="right-text">{{ item.zone }}</td>
                        </tr>
                    {% endfor %}
                    {% if npc.morph.bodyArmor > 0 %}
                        <tr>
                            <td>Morphe</td>
                            <td>{{ npc.morph.bodyArmor }}</td>
                            <td class="right-text">T/B/J/H</td>
                        </tr>
                    {% endif %}
                </table>
            </div>
        </div>
        <div class="pure-g">
            <div class="pure-u-1">
                <h2>Attaques</h2>
                <table class="pure-table">
                    {% for item in npc.attackRolls %}
                        <tr>
                            <td>{{ item.title }}</td>
                            <td>{{ item.reach }}</td>
                            <td>{{ item.rateOfFire }}×</td>
                            <td>{{ item.roll.label }}</td>
                            <td>{{ _self.print_trait(item.roll, item.rateOfFire, item.rollBonus) }}</td>
                            <td>{{ _self.print_damage(item.damage) }}</td>
                            <td>PA {{ item.armorPiercing }}</td>                            
                        </tr>
                    {% endfor %}
                </table>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }} 
    <script type="module">
        import Mousetrap from 'mousetrap';

        Mousetrap.bind('s', function () {
            location.assign('{{ path('app_npcgenerator_edit', {pk: npc.pk}) }}')
            return false
        });

        Mousetrap.bind('w', function () {
            location.assign('{{ path('app_npcgenerator_battle', {pk: npc.pk}) }}')
            return false
        });
    </script>

    <script type="module">
        import rollPool from 'dice-roller';
        import { Howl } from 'howler';

        const inceptionSound = new Howl({
            src: ['{{ asset('sound/foghorn.webm')}}', '{{ asset('sound/foghorn.ogg') }}']
        })
        const rollSound = new Howl({
            src: ['{{ asset('sound/roll.webm')}}', '{{ asset('sound/roll.ogg') }}']
        })

        Alpine.data('traitroller', () => ({
                dice: null,
                wildcard: {{ npc.wildCard ? 'true' : 'false' }},
                modifier: 0,
                result: null,
                rateOfFire: 1,
                rolling(ev) {
                    this.dice = ev.detail.dice;
                    this.modifier = ev.detail.modifier;
                    this.rateOfFire = ev.detail.rof
                    this.result = null;
                    var data = this

                    let pool = Array(this.rateOfFire).fill(this.dice)
                    pool.push(6) // wild die
                    rollPool(pool).then(function (rolled) {
                        console.log(rolled)
                        setTimeout(function () {

                            let wildDie = 0
                            if (data.wildcard) {
                                wildDie = rolled[rolled.length - 1] // keep the wild die
                                rolled.sort(function (a, b) {
                                    return b - a
                                })
                                rolled.pop() // remove the weakest value
                            } else {
                                wildDie = rolled.pop() // remove the wild die
                                rolled.sort(function (a, b) {
                                    return b - a
                                })
                            }
                            let maxi = rolled[0]

                            // sound
                            if ((maxi == 1) && (wildDie == 1)) {
                                inceptionSound.play();
                            } else {
                                rollSound.play()
                            }

                            data.result = rolled.map(function (val) {
                                return val + data.modifier
                            })
                        }, 300)
                    })
                }
            }))

        Alpine.data('damageroller', () => ({
                dice: null,
                modifier: 0,
                result: null,
                rollDamage(ev) {
                    let damage = ev.detail
                    this.dice = damage.diceCount;
                    this.modifier = damage.bonus;
                    this.result = null;
                    var data = this

                    let pool = []
                    Object.keys(damage.diceCount).forEach(function (key, index) {
                        let val = damage.diceCount[key]
                        for (let k = 0; k < val; k++) {
                            pool.push(key)
                        }
                    })
                    rollPool(pool).then(function (rolled) {
                        setTimeout(function () {
                            console.log(rolled)
                            const sum = rolled.reduce((a, b) => a + b, 0)

                            // sound
                            rollSound.play()
                            data.result = sum + data.modifier
                        }, 300)
                    })
                }
            }))
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .modified-roll {
            color: darkred;
        }
        /* the non-alignemtn of titles on the top bother me */
        .character-show .pure-u-1 > h2:first-of-type {
            margin-top: 0.3em;
        }
    </style>
{% endblock %}
