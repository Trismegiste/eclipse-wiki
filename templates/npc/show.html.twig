{% extends "vertex/show.html.twig" %}
{% set npc = vertex %}
{% macro print_trait(trait, rof = 1, bonus = 0) %}
    <button x-on:click="$dispatch('roll', { dice: {{ trait.dice }}, modifier: {{ trait.modifier + bonus }}, rof: {{ rof }} })" class="pure-button">
        d{{ trait.dice }}
        {% if (trait.modifier + bonus) > 0 %}
            + {{ trait.modifier + bonus }}
        {% endif %}
    </button>
{% endmacro %}

{% macro print_damage(damage) %}
    <button class="pure-button" x-on:click="$dispatch('damage', {{ damage|json_encode() }} )">
        {{ damage }}
    </button>
    <button class="pure-button" x-on:click="$dispatch('damage', {{ add_raise(damage)|json_encode() }} )">
        +d6
    </button>
{% endmacro %}

{% block header_title %}
    {{ include('npc/menu.html.twig') }}
{% endblock %}

{% block info %}
    <div x-data="{ diceService: new DicePool() }">
        <h2>Lancer de trait</h2>
        <div class="diceroller" 
             x-data="traitroller" 
             x-on:roll.window="rolling($event)">
            <div x-show="dice">
                <span x-show="rateOfFire > 1" x-text="rateOfFire + '×'"></span>
                <i x-bind:class="'icon-d' + dice"></i>
                <i class="icon-d6" x-bind:class="{ 'extra-dice': !wildcard }"></i>
                <span x-show="modifier > 0" x-text="'+' + modifier"></span>
            </div>
            <div x-show="(dice !== null) && (result === null)" class="roll-result">
                <i class="icon-spin3 animate-spin"></i>
            </div>
            <div x-show="(dice !== null) && (result !== null)" class="roll-result">
                <template x-for="roll in result">
                    <div x-text="roll" x-bind:class="{ fumble: roll===1 }"></div>
                </template>
            </div>        
        </div>    
        <h2>Lancer de dégâts</h2>
        <div class="diceroller" 
             x-data="damageroller" 
             x-on:damage.window="rollDamage($event)">
            <div x-show="dice">
                <template x-for="(cnt,side) in dice">
                    <template x-for="i in cnt">
                        <i x-bind:class="'icon-d' + side"></i>
                    </template>
                </template>
                <span x-show="modifier > 0" x-text="'+' + modifier"></span>
            </div>
            <div x-show="(dice !== null) && (result === null)" class="roll-result">
                <i class="icon-spin3 animate-spin"></i>
            </div>
            <div x-show="(dice !== null) && (result !== null)" x-text="result" class="roll-result">
            </div>        
        </div>
    </div>
{% endblock %}

{% block content %}
    <div class="character-show" x-data="{}">
        <div class="pure-g">
            <div class="pure-u-1-4">
                <h2>Attributs</h2>
                <table class="pure-table">
                    {% for attr in npc.attributes %}
                        <tr>
                            <td>{{ attr.name }}</td>
                            <td>{{ _self.print_trait(attr) }}</td>
                        </tr>
                    {% endfor %}
                </table>
                <h2>Handicaps</h2>
                <ul>
                    {% for hind in npc.hindrances %}
                        <li>
                            {{ hind.origin }}
                            <a href="{{ wikilink(hind.name) }}">{{ hind.name }} ({{ level_hindrance(hind.level) }})</a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="pure-u-1-4">
                <h2>Compétences</h2>
                <table class="pure-table">
                    {% for skill in npc.skills %}
                        <tr>
                            <td>{{ skill.name }}</td>
                            <td>{{ _self.print_trait(skill) }}</td>
                        </tr>
                    {% endfor %}
                </table>
            </div>
            <div class="pure-u-1-4">
                <h2>Atouts</h2>
                <ul>
                    {% for edge in npc.edges %}
                        <li>
                            <a href="{{ wikilink(edge.name) }}">{{ edge.name }}</a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="pure-u-1-4">
                <h2>Carac. 2<sup>ndaires</sup></h2>
                <table class="pure-table">
                    <tr>
                        <td>Parade</td>
                        <td>{{ npc.parry }}</td>
                    </tr>
                    <tr>
                        <td>Malus distance</td>
                        <td>{{ npc.rangedMalus }}</td>
                    </tr>
                    <tr>
                        <td>Résistance</td>
                        <td>{{ npc.toughness }} ({{ npc.totalArmor }})</td>
                    </tr>
                </table>
                <h2>Blessures</h2>
                <p>
                    <label>Secoué</label>
                    <input type="checkbox" name="shaken"/>
                </p>
                {% if npc.wildCard %}
                    <p>
                        Niveau
                        {% for idx in 0..3 %}
                            <input type="radio" name="wound_level" id="wound_level_{{ idx }}"/>
                            <label for="wound_level_{{ idx }}">{{ idx }}</label>
                        {% endfor %}
                    </p>
                {% endif %}
                <h2>Fatigue</h2>
                <p>
                    Niveau
                    {% for idx in 0..2 %}
                        <input type="radio" name="fatigue_level" id="fatigue_level_{{ idx }}"/>
                        <label for="fatigue_level_{{ idx }}">{{ idx }}</label>
                    {% endfor %}
            </div>
        </div>
        <div class="pure-g">
            <div class="pure-u-3-4">
                <h2>Attaques</h2>
                <table class="pure-table">
                    {% for item in npc.attacks %}
                        <tr>
                            <td>{{ item.title }}</td>
                            <td>{{ item.reach }}</td>
                            <td>{{ item.rateOfFire }}×</td>
                            <td>{{ item.roll.name }}</td>
                            <td>{{ _self.print_trait(item.roll, item.rateOfFire, item.rollBonus) }}</td>
                            <td>{{ _self.print_damage(item.damage) }}</td>
                            <td>PA {{ item.armorPiercing }}</td>                            
                        </tr>
                    {% endfor %}
                </table>
            </div>
            <div class="pure-u-1-4">
                <h2>Armures</h2>
                <table class="pure-table">
                    {% for item in npc.armors %}
                        <tr>
                            <td>{{ item.name }}</td>
                            <td>{{ item.protect }} {{ item.special }}</td>
                            <td class="right-text">{{ item.zone }}</td>
                        </tr>
                    {% endfor %}
                </table>
            </div> 
        </div>
        <div class="pure-g">
            <div class="pure-u-1-3">
                <h2>Équipement</h2>
                <ul>
                    {% for item in npc.gears %}
                        <li>
                            {{ item.name }}
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="pure-u-1-3">
                {{ include('fragment/morph_detail.html.twig', {morph: npc.morph}) }}
            </div>
            <div class="pure-u-1-3">
                {% if npc.economy is not empty %}
                    <h2>Économies</h2>
                    <table class="pure-table">
                        {% for eco, val in npc.economy %}
                            {% if val > 0 %}
                                <tr>
                                    <td>{{ eco }}</td>
                                    <td>{{ val }}</td>
                                </tr>
                            {% endif %}
                        {% endfor %}
                    </table>
                {% endif %}
            </div>
        </div>
        <div class="pure-g">
            <div class="pure-u-1">
                <h1>Informations</h1>
                {{ parent() }}
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }} 
    <script src="{{ asset('js/howler.core.min.js') }}"></script>    
    <script>
        const inceptionSound = new Howl({
            src: ['{{ asset('sound/foghorn.webm')}}', '{{ asset('sound/foghorn.ogg') }}']
        })
        const rollSound = new Howl({
            src: ['{{ asset('sound/roll.webm')}}', '{{ asset('sound/roll.ogg') }}']
        })

        Mousetrap.bind('s', function () {
            location.assign('{{ path('app_npcgenerator_edit', {pk: npc.pk}) }}')
            return false
        });

        Mousetrap.bind('w', function () {
            location.assign('{{ path('app_npcgenerator_battle', {pk: npc.pk}) }}')
            return false
        });

        document.addEventListener('alpine:init', () => {
            Alpine.data('traitroller', () => ({
                    dice: null,
                    wildcard: {{ npc.wildCard ? 'true' : 'false' }},
                    modifier: 0,
                    result: null,
                    rateOfFire: 1,
                    rolling(ev) {
                        this.dice = ev.detail.dice;
                        this.modifier = ev.detail.modifier;
                        this.rateOfFire = ev.detail.rof
                        this.result = null;
                        var data = this

                        let pool = Array(this.rateOfFire).fill(this.dice)
                        pool.push(6) // wild die
                        this.diceService.rollPool(pool).then(function (rolled) {
                            console.log(rolled)
                            setTimeout(function () {

                                let wildDie = 0
                                if (data.wildcard) {
                                    wildDie = rolled[rolled.length - 1] // keep the wild die
                                    rolled.sort(function (a, b) {
                                        return b - a
                                    })
                                    rolled.pop() // remove the weakest value
                                } else {
                                    wildDie = rolled.pop() // remove the wild die
                                    rolled.sort(function (a, b) {
                                        return b - a
                                    })
                                }
                                let maxi = rolled[0]

                                // sound
                                if ((maxi == 1) && (wildDie == 1)) {
                                    inceptionSound.play();
                                } else {
                                    rollSound.play()
                                }

                                data.result = rolled.map(function (val) {
                                    return val + data.modifier
                                })
                            }, 300)
                        })
                    }
                }))

            Alpine.data('damageroller', () => ({
                    dice: null,
                    modifier: 0,
                    result: null,
                    rollDamage(ev) {
                        let damage = ev.detail
                        this.dice = damage.diceCount;
                        this.modifier = damage.bonus;
                        this.result = null;
                        var data = this

                        let pool = []
                        Object.keys(damage.diceCount).forEach(function (key, index) {
                            let val = damage.diceCount[key]
                            for (let k = 0; k < val; k++) {
                                pool.push(key)
                            }
                        })
                        this.diceService.rollPool(pool).then(function (rolled) {
                            setTimeout(function () {
                                console.log(rolled)
                                const sum = rolled.reduce((a, b) => a + b, 0)

                                // sound
                                rollSound.play()
                                data.result = sum + data.modifier
                            }, 300)
                        })
                    }
                }))

        })
    </script>
{% endblock %}