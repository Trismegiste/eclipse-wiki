{% extends "base.html.twig" %}

{% macro print_trait(trait) %}
    <button x-on:click="$dispatch('roll', { dice: {{ trait.dice }}, modifier: {{ trait.modifier }} })" class="pure-button">
        d{{ trait.dice }}
        {% if trait.modifier > 0 %}
            + {{ trait.modifier }}
        {% endif %}
    </button>
{% endmacro %}

{% block header_title %}PNJ : {{ npc.name }} {% if npc.wildCard %}<i class="icon-wildcard"></i>{% endif %}{% endblock %}

{% block info %}
    <h2>Lancer de dés</h2>
    <div class="diceroller" 
         x-data="diceroller" 
         x-on:roll.window="rolling($event)">
        <div x-show="dice">
            <i x-bind:class="'icon-d' + dice"></i>
            <i class="icon-d6" x-bind:class="{ 'extra-dice': !wildcard }"></i>
            <span x-text="'+' + modifier"></span>
        </div>
        <div x-show="(dice !== null) && (result === null)" class="roll-result">
            <i class="icon-spin3 animate-spin"></i>
        </div>
        <div x-show="(dice !== null) && (result !== null)" x-text="result" class="roll-result" x-bind:class="{ fumble: result===1 }">
        </div>        
    </div>
{% endblock %}

{% block content %}
    <div class="character-show" x-data="{}">
        <div class="pure-g">
            <div class="pure-u-1-3">
                <h2>Attributs</h2>
                <table>
                    {% for attr in npc.attributes %}
                        <tr>
                            <td>{{ attr.name }}</td>
                            <td>{{ _self.print_trait(attr) }}</td>
                        </tr>
                    {% endfor %}
                </table>
                <h2>Handicaps</h2>
                <ul>
                    {% for hind in npc.hindrances %}
                        <li>
                            {{ hind.origin }}
                            <a href="{{ wikilink(hind.name) }}">{{ hind.name }} ({{ level_hindrance(hind.level) }})</a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="pure-u-1-3">
                <h2>Compétences</h2>
                <table>
                    {% for skill in npc.skills %}
                        <tr>
                            <td>{{ skill.name }}</td>
                            <td>{{ _self.print_trait(skill) }}</td>
                        </tr>
                    {% endfor %}
                </table>
            </div>
            <div class="pure-u-1-3">
                <h2>Atouts</h2>
                <ul>
                    {% for edge in npc.edges %}
                        <li>
                            <a href="{{ wikilink(edge.name) }}">{{ edge.name }}</a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        </div>
        <div class="pure-g">
            <div class="pure-u-1-3">
                <h2>Équipement</h2>
                <ul>
                    {% for item in npc.gears %}
                        <li>
                            {{ item.name }}
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <div class="pure-u-1-3">
                {{ include('fragment/morph_detail.html.twig', {morph: npc.morph}) }}
            </div>
            <div class="pure-u-1-3">
                <h2>Économies</h2>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('js/howler.core.min.js') }}"></script>    
    <script>
        const inceptionSound = new Howl({
            src: ['{{ asset('sound/foghorn.webm')}}', '{{ asset('sound/foghorn.ogg') }}']
        })
        const rollSound = new Howl({
            src: ['{{ asset('sound/roll.webm')}}', '{{ asset('sound/roll.ogg') }}']
        })

        document.addEventListener('alpine:init', () => {
            Alpine.data('diceroller', () => ({
                    dice: null,
                    wildcard: {{ npc.wildCard ? 'true' : 'false' }},
                    modifier: 0,
                    result: null,
                    diceService: new DicePool(),
                    rolling(ev) {
                        this.dice = ev.detail.dice;
                        this.modifier = ev.detail.modifier;
                        this.result = null;
                        var data = this
                        this.diceService.rollPool([this.dice, 6]).then(function (rolled) {
                            console.log(rolled)
                            setTimeout(function () {
                                let maxi = Math.max.apply(null, rolled)

                                // sound
                                if (maxi == 1) {
                                    inceptionSound.play();
                                } else {
                                    rollSound.play()
                                }

                                if (data.wildcard) {
                                    data.result = maxi + data.modifier
                                } else {
                                    data.result = rolled[0] + data.modifier
                                }
                            }, 300)
                        })
                    }
                }))
        })
    </script>
{% endblock %}