{% extends "base.html.twig" %}
{% form_theme form _self %}
{% form_theme profile _self %}

{% block header_title %}
    {{ include('npc/menu.html.twig', {npc: form.vars.data}) }}
{% endblock %}

{% block _npc_stats_edges_widget %}
    <div id="npc_stats_edges" class="collection">
        <template x-for="(edge, idx) in edges">
            <div class="pure-g">
                <div class="pure-u-1 pure-u-xl-1-3 form-label"><label x-text="edge.name" x-bind:title="'PrÃ©requis: [' + edge.rank.toUpperCase() + '] ' + edge.requis"></label></div>
                <div class="pure-u-5-8 pure-u-xl-7-24">
                    <input x-bind:name="'npc_stats[edges][' + idx + '][name]'" type="hidden" required="required" x-model="edge.name"/>
                    <select x-bind:name="'npc_stats[edges][' + idx + '][origin]'" required="required" x-model="edge.origin">
                        {% for entry in form.vars.prototype.origin.vars.choices %}
                            <option value="{{ entry.value }}">{{ entry.label }}</option>
                        {% endfor %}
                    </select>
                </div>
                <nav class="pure-u-1-8">
                    <a x-on:click="moveEdgeUp(idx)"><i class="icon-angle-circled-up"></i></a>
                </nav>
                <nav class="pure-u-1-8">
                    <a x-on:click="moveEdgeDown(idx)"><i class="icon-angle-circled-down"></i></a>
                </nav>
                <nav class="pure-u-1-8">
                    <a x-on:click="removeEdge(idx)"><i class="icon-trash-empty"></i></a>
                </nav>
            </div>
        </template>
    </div>
{% endblock %}

{% block _npc_stats_hindrances_widget %}
    <div id="npc_stats_hindrances" class="collection">
        <template x-for="(hindrance, idx) in hindrances">
            <div class="pure-g">
                <div class="pure-u-1 pure-u-xl-1-3 form-label"><label x-text="hindrance.name"></label></div>
                <div class="pure-u-1-3 pure-u-xl-1-4">
                    <template x-if="1 == hindrance.choices">
                        <label class="fakeselect">Mineur<input type="hidden" x-bind:name="'npc_stats[hindrances][' + idx + '][level]'" x-model="hindrance.choices"/></label>
                    </template>
                    <template x-if="2 == hindrance.choices">
                        <label class="fakeselect">Majeur<input type="hidden" x-bind:name="'npc_stats[hindrances][' + idx + '][level]'" x-model="hindrance.choices"/></label>
                    </template>
                    <template x-if="3 == hindrance.choices">
                        <select x-bind:name="'npc_stats[hindrances][' + idx + '][level]'" required="required" x-model="hindrance.level">
                            {% for entry in form.vars.prototype.level.vars.choices %}
                                <option value="{{ entry.value }}">{{ entry.label }}</option>
                            {% endfor %}
                        </select>
                    </template>
                </div>                
                <div class="pure-u-1-2 pure-u-xl-1-4">
                    <input x-bind:name="'npc_stats[hindrances][' + idx + '][name]'" type="hidden" required="required" x-model="hindrance.name"/>
                    <select x-bind:name="'npc_stats[hindrances][' + idx + '][origin]'" required="required" x-model="hindrance.origin">
                        {% for entry in form.vars.prototype.origin.vars.choices %}
                            <option value="{{ entry.value }}">{{ entry.label }}</option>
                        {% endfor %}
                    </select>
                </div>
                <nav class="pure-u-1-6">
                    <a x-on:click="removeHindrance(idx)"><i class="icon-trash-empty"></i></a>
                </nav>
            </div>
        </template>
    </div>
{% endblock %}

{% block _npc_stats_skills_widget %}
    <div id="npc_stats_skills" class="collection">
        <template x-for="(skill, idx) in skills" :key="skill.name">
            <div class="pure-g">
                <div class="pure-u-1 pure-u-xl-1-4 form-label"><label x-text="skill.name"></label></div>
                <div class="pure-u-1 pure-u-xl-3-4 form-widget">

                    {%- for num, child in form.vars.prototype.roll %}
                        <input type="radio"
                               x-bind:id="'npc_stats_skills_' + idx + '_roll_{{ num }}'" 
                               x-bind:name="'npc_stats[skills][' + idx +'][roll]'" 
                               x-bind:checked="(skill.dice + skill.modifier) == {{ child.vars.value }}"
                               value="{{ child.vars.value }}"
                               required="required"><label x-bind:for="'npc_stats_skills_' + idx + '_roll_{{ num }}'"
                               class="required">{{ dice_icon(child.vars.label) }}</label>
                    {% endfor -%}
                    {{ form_widget(form.vars.prototype.name, {
                        attr: {
                            'x-bind:name': "'npc_stats[skills][' + idx + '][name]'",
                            'x-bind:value': "skill.name"
                        } 
                    }) }}
                </div>
            </div>
        </template>
    </div>
{% endblock %}

{% block info %}
    <div x-data class="pure-g profile">
        <div class="pure-u-1" x-data="{ profile: null }">
            <h2>Profils</h2>
            {{ form(profile) }}
        </div>
    </div>
{% endblock %}

{% block _single_node_choice_node_row %}
    {{ form_widget(form) }}
    <div class="stats">
        <template x-if="profile !== null">
            <ul>
                <template x-for="idx, title in profile.attributes">
                    <li x-text="title" class="skill"></li>
                </template>
                <template x-for="idx, title in profile.skills">
                    <li x-text="title" class="skill"></li>
                </template>
                <template x-for="idx, title in profile.networks">
                    <li x-text="title" class="network"></li>
                </template>
            </ul>
        </template>
    </div>
{% endblock %}

{% block content %}
    <section x-data="{{ form.vars.data|json_encode()|escape('html_attr') }}">
        <section x-data="behavior">
            <section x-on:profile.window="addProfile($event.detail)">
                {{ form(form) }}
            </section>
        </section>
    </section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="module">
        Alpine.data('behavior', () => ({
                edgeFilter: {cbt: true, soc: true, pro: true},
                removeHindrance(k) {
                    this.hindrances.splice(k, 1)
                },
                removeEdge(k) {
                    this.edges.splice(k, 1)
                },
                moveEdgeUp(idx) {
                    if (idx > 0) {
                        let tmp = this.edges[idx - 1];
                        this.edges[idx - 1] = this.edges[idx];
                        this.edges[idx] = tmp;
                    }
                },
                moveEdgeDown(idx) {
                    if (idx < (this.edges.length - 1)) {
                        let tmp = this.edges[idx + 1];
                        this.edges[idx + 1] = this.edges[idx];
                        this.edges[idx] = tmp;
                    }
                },
                checkingSkill(target) {
                    if (target.checked) {
                        this.skills.push({name: target.value, dice: 4, modifier: 0})
                    } else {
                        let idx = this.searchSkillIdxByName(target.value)
                        if (false !== idx) {
                            this.skills.splice(idx, 1)
                        }
                    }
                },
                searchSkillIdxByName(name) {
                    for (let idx = 0; idx < this.skills.length; idx++) {
                        if (this.skills[idx].name === name) {
                            return idx
                        }
                    }

                    return false
                },
                hasSkill(name) {
                    return false !== this.searchSkillIdxByName(name)
                },
                hasEdge(name) {
                    for (const edge of this.edges) {
                        if (name === edge.name) {
                            return true
                        }
                    }
                    return false
                },
                addProfile(model) {
                    // process attributes bonus
                    let attribute = model.attributes
                    for (const label in attribute) {
                        let attributeRow = document.querySelector('input[value="' + label + '"]').parentElement
                        let traitValue = 4
                        let diceRadio = attributeRow.querySelector('input[type=radio]:checked')
                        if (diceRadio !== null) {
                            traitValue = parseInt(diceRadio.value)
                        }
                        traitValue += 2
                        attributeRow.querySelector('input[type=radio][value="' + traitValue + '"]').checked = true
                    }
                    // process skills bonus
                    let skill = model.skills
                    for (const label in skill) {
                        let idx = this.searchSkillIdxByName(label)
                        if (false === idx) {
                            this.skills.push({name: label, dice: 4, modifier: 0})
                        } else {
                            this.skills[idx].dice += 2
                        }
                    }
                    // process edges array
                    let edge = model.edges
                    for (const label of edge) {
                        if (!this.hasEdge(label)) {
                            this.edges.push(JSON.parse(document.querySelector('option[data-key="' + label + '"]').value))
                        }
                    }
                    // process economy bonus
                    for (const label in model.networks) {
                        let economyWidget = document.querySelector('input[data-economy="' + label + '"]')
                        if (!economyWidget.value) {
                            economyWidget.value = 0
                        }
                        economyWidget.value++
                    }
                }
            }))

        Alpine.start()
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #npc_stats_skills i {
            font-size: 140%;
        }
        #npc_stats_skills input:checked + label {
            color: #c60000;
        }
        .profile button {
            margin-bottom: 1em;
        }
    </style>
{% endblock %}
