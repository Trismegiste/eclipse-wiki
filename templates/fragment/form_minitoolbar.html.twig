{# a set of button for special action in form #}
<div class="minitoolbar" x-data="commonToolbar('{{ form.vars.id }}')">
    <a href="{{ path('app_invokeaipicture_vertexsearch', {pk: form.parent.vars.data.pk}) }}" class="pure-button button-delete" title="Cancel edition and jump to append an InvokeAI picture">
        <i class="icon-dcgan"></i>
    </a>
    <a href="#" class="pure-button" title="Transform current selection into a picture gallery" x-on:click.prevent="selectionToGallery">
        <i class="icon-album"></i>
    </a>
    <a href="#" class="pure-button" title="Transform selected OpenAI output into wikitext" x-on:click.prevent="openAiToWikitext">
        <i class="icon-openai"></i>
    </a>
</div>

<script type="module">
    Alpine.data('commonToolbar', (widgetId) => ({

            selectionToGallery() {
                const widget = document.getElementById(widgetId)
                // cleaning and splitting into array of lines
                let selection = widget.value.substring(widget.selectionStart, widget.selectionEnd).trim().split("\n")
                // if even number of lines
                if ((selection.length > 0) && (0 === selection.length % 2)) {
                    // checking if first half set of lines start with a picture link
                    for (let i = 0; i < selection.length / 2; i++) {
                        selection[i] = selection[i].trim()
                        if (!(selection[i].startsWith('[[file:') && selection[i].endsWith(']]'))) {
                            return;
                        }
                    }
                    // transforms into table cells
                    for (let i = 0; i < selection.length / 2; i++) {
                        selection[i] = '|' + selection[i]
                    }
                    // transforms into table header
                    for (let i = selection.length / 2; i < selection.length; i++) {
                        selection[i] = '!' + selection[i]
                    }
                    // table row separator
                    selection.splice(selection.length / 2, 0, "|-")
                    // table start and end
                    selection.unshift('{|')
                    selection.push('|}')
                    // joins lines into one string
                    let replacing = selection.join("\n") + "\n"
                    // replacing the selection with the table wikitext
                    widget.value = widget.value.substring(0, widget.selectionStart) + replacing + widget.value.substr(widget.selectionEnd)
                }
            },

            openAiToWikitext() {
                const widget = document.getElementById(widgetId)
                // cleaning the selection in the textarea
                let selection = widget.value.substring(widget.selectionStart, widget.selectionEnd).trim()
                let wikitext = []

                // title
                const titleRegex = /^\*\*([^\*]+)\s:\*\*\n\n/gm
                const title = titleRegex.exec(selection)
                if (null !== title) {
                    wikitext.push(`==${title[1]}==`)
                }

                // paragraph
                const regex = /^.*\*\*([^\*]+)\s:\*\*\n\s+([^\n]+)\n\n/gm
                let m = null
                while ((m = regex.exec(selection)) !== null) {
                    // This is necessary to avoid infinite loops with zero-width matches
                    if (m.index === regex.lastIndex) {
                        regex.lastIndex++
                    }
                    wikitext.push(`===${m[1]}===`)
                    wikitext.push(m[2])
                }
                // replacing the selection with the formatted wikitext
                widget.value = widget.value.substring(0, widget.selectionStart) + wikitext.join("\n") + widget.value.substr(widget.selectionEnd)
            }

        }))
</script>        