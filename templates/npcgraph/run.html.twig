{% extends "base.html.twig" %}
{% form_theme form _self %}

{% block title %}Création rapide de Transhumain{% endblock %}
{% block header_title %}
    <div style="float: right">
        <a href="{{ path('app_npcgraphcrud_edit') }}" title="Éditer le graphe">
            <i class="icon-edit"></i>
        </a>
    </div>
    {{ block('title') }}
{% endblock %}

{% block content %}
    <div x-data="quickCreation">
        <section class="pure-g node-selection">
            {% set cell_style = 'pure-u-1 pure-u-md-1-2 pure-u-xl-1-6' %}
            <template x-for="(key, idx) in choices" :key="key">
                <div class="{{ cell_style }}" x-data="{selected: seekNode(key)}">
                    <article>
                        <header>
                            <h2 x-text="selected.name"></h2>
                        </header>
                        <div class="stats">
                            <ul>
                                <template x-for="idx, title in selected.skills">
                                    <li x-text="title" class="skill"></li>
                                </template>
                                <template x-for="idx, title in selected.networks">
                                    <li x-text="title" class="network"></li>
                                </template>
                            </ul>
                        </div>
                        <footer>
                            <template x-for="child in selected.children">
                                <label x-data="{choice: seekNode(child)}">
                                    <input type="radio" x-bind:name="selected.name + '_child'" x-on:click="setChoiceAt(idx + 1, choice.name)">
                                    <span x-text="choice.name"></span>
                                </label>
                            </template>
                        </footer>
                    </article>
                </div>
            </template>
        </section>
        <hr/>
        {{ form_start(form) }}
        {{ form_row(form.title) }}
        <section class="pure-g result-selection">
            <div class="{{ cell_style }}">
                {{ form_row(form.background) }}
            </div>
            <div class="{{ cell_style }}">
                {{ form_row(form.faction) }}
            </div>
            <div class="{{ cell_style }}">
                <h2>Attributs</h2>
                <table class="pure-table">
                    <template x-for="(value, attr) in getAttributes()">
                        <tr>
                            <th x-text="attr"></th>
                            <td x-text="'d'+value"></td>
                        </tr>
                    </template>
                </table>
            </div>
            <div class="{{ cell_style }}">
                <h2>Compétences</h2>
                <table class="pure-table">
                    <template x-for="(value, attr) in getSkills()">
                        <tr>
                            <th x-text="attr"></th>
                            <td x-text="'d'+value"></td>
                        </tr>
                    </template>
                </table>
            </div>
            <div class="{{ cell_style }}">
                <h2>Réseaux</h2>
                <table class="pure-table">
                    <template x-for="(value, attr) in getNetworks()">
                        <tr>
                            <th x-text="attr"></th>
                            <td x-text="value"></td>
                        </tr>
                    </template>
                </table>
            </div>
            <div class="{{ cell_style }}">
                <h2>Atouts</h2>
                <ul>
                    <template x-for="value in getEdges()">
                        <li x-id="['edge']">
                            <input type="checkbox" checked="true" name="edge" x-bind:value="value" x-bind:id="$id('edge')"/>
                            <label x-text="value" x-bind:for="$id('edge')"></label>
                        </li>
                    </template>
                </ul>
            </div>
            <div class="{{ cell_style }}">
                {{ form_row(form.morph) }}
            </div>  
            <div class="{{ cell_style }}">
                <h2>Keywords</h2>
                <ul>
                    <template x-for="value in getText2img()">
                        <li x-text='value'></li>
                    </template>
                </ul>
            </div> 
        </section>
        {{ form_end(form) }}
    </div>
{% endblock %}

{% block _npc_background_row %}
    <h2>{{ form_label(form) }}</h2>
    <ul>
        <template x-for="(value, idx) in getBackgrounds()">
            <li x-id="['bg']">
                <input type="radio" name="{{ form.vars.full_name }}" x-bind:value="value" x-bind:id="$id('bg')" required/>
                <label x-text="value" x-bind:for="$id('bg')"></label>
            </li>
        </template>
    </ul>
{% endblock %}

{% block _npc_faction_row %}
    <h2>{{ form_label(form) }}</h2>
    <ul>
        <template x-for="value in getFactions()">
            <li x-id="['fac']">
                <input type="radio" name="{{ form.vars.full_name }}" x-bind:value="value" x-bind:id="$id('fac')" required/>
                <label x-text="value" x-bind:for="$id('fac')"></label>
            </li>
        </template>
    </ul>
{% endblock %}

{% block _npc_morph_row %}
    <h2>{{ form_label(form) }}</h2>
    <ul>
        <template x-for="value in getMorphs()">
            <li x-id="['mrf']">
                <input type="radio" name="{{ form.vars.full_name }}" x-bind:value="value" x-bind:id="$id('mrf')" required/>
                <label x-text="value" x-bind:for="$id('mrf')"></label>
            </li>
        </template>
    </ul>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('quickCreation', () => ({
                    graph: {{ graph|raw }},
                    choices: ['root'],
                    seekNode: function (key) {
                        const found = this.graph.find(node => {
                            return node.name === key
                        })
                        if (typeof found === 'undefined') {
                            throw new Error('The node named "' + key + '" is unknown')
                        } else {
                            return found
                        }
                    },
                    setChoiceAt: function (i, key) {
                        this.choices.splice(i)
                        this.choices[i] = key
                    },
                    getAttributes: function () {
                        let cumulative = {}
                        for (const [key, value] of Object.entries(this.flattenObjectWithSum('attributes'))) {
                            cumulative[key] = 4 + 2 * value
                        }
                        return cumulative
                    },
                    getSkills: function () {
                        let cumulative = {}
                        for (const [key, value] of Object.entries(this.flattenObjectWithSum('skills'))) {
                            cumulative[key] = 2 + 2 * value
                        }
                        return cumulative
                    },
                    getNetworks: function () {
                        return this.flattenObjectWithSum('networks')
                    },
                    getEdges: function () {
                        return this.flattenArrayWithUnique('edges')
                    },
                    getBackgrounds: function () {
                        return this.flattenArrayWithUnique('backgrounds')
                    },
                    getFactions: function () {
                        return this.flattenArrayWithUnique('factions')
                    },
                    getMorphs: function () {
                        return this.flattenArrayWithUnique('morphs')
                    },
                    getText2img: function () {
                        return this.flattenArrayWithUnique('text2img')
                    },
                    flattenObjectWithSum: function (propertyKey) {
                        let cumulative = {}
                        for (let choice of this.choices) {
                            let bonus = this.seekNode(choice)
                            for (const [key, value] of Object.entries(bonus[propertyKey])) {
                                if (!cumulative.hasOwnProperty(key)) {
                                    cumulative[key] = 0
                                }
                                cumulative[key] += value
                            }
                        }
                        return cumulative
                    },
                    flattenArrayWithUnique: function (propertyKey) {
                        let cumulative = new Set()
                        for (let choice of this.choices) {
                            let bonus = this.seekNode(choice)
                            for (const value of bonus[propertyKey]) {
                                cumulative.add(value)
                            }
                        }
                        return Array.from(cumulative.values())
                    }
                }))
        })
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .node-selection article {
            margin: 0 1em 1em 0;
        }
        .node-selection header h2 {
            background-color: orangered;
            color: white;
            padding: 0.2em;
            text-transform: capitalize;
        }
        .node-selection .stats ul {
            padding-left: 1em;
        }
        .stats li {
            padding: 0.2em 0;
        }
        .stats li.skill {
            background-color: lightblue;
        }
        .stats li.network {
            background-color: orange;
        }
        .node-selection footer {
            background-color: lightgray;
        }
        .node-selection footer label {
            display: block;
            padding: 0.4em 0;
        }
        .result-selection ul {
            padding: 0;
            list-style: none;
        }
    </style>
{% endblock %}