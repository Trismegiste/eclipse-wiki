{% extends "base.html.twig" %}

{% block header_title %}Tracker{% endblock %}

{% block content %}
    <div x-data="behavior" class="pure-g">
        <section class="pure-u-1-2">
            <div class="npc-list pure-g choices">
                {% for npc in listing %}
                    <div class="pure-u-1-3">
                        <a x-on:click="push('{{ npc.title }}',{{ npc.wildCard ? 'true' : 'false' }},{{ npc.parry }},{{ npc.rangedMalus }},{{ npc.toughness }},{{ npc.totalArmor }})">
                            <i class="{{ char_icon(npc) }}"></i>
                            {{ npc.title }}
                        </a>
                    </div>
                {% endfor %}
            </div>
        </section>
        <section class="pure-u-1-6">
            <div class="pure-g npc-list">
                <template x-for="(npc,idx) in encounter">
                    <div class="pure-u-1">
                        <p x-on:click="remove(idx)">
                            <i class="icon-token"></i>
                            <span x-text="npc.name"></span>
                        </p>
                    </div>
                </template>
            </div>
        </section>
        <div  class="pure-u-1-3">
            <canvas x-ref="qrious" class="pure-img" x-init="$watch('encounter', value => qrCode.value = staticUrl + getParameters())">
            </canvas>
        </div>
    </div>     
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('neocotic/qrious.min.js') }}"></script>
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('behavior', () => ({
                    staticUrl: '{{ url_tracker }}?',
                    encounter: [],
                    qrCode: null,
                    init() {
                        this.qrCode = new QRious({
                            element: this.$refs.qrious,
                            size: Math.min(innerWidth, innerHeight),
                            level: 'M',
                            value: '-Vide-'
                        })
                    },
                    push(name, wc, par, rgm, tough, arm) {
                        this.encounter.push({name: name, w: wc, p: par, r: rgm, t: tough, a: arm})
                    },
                    getParameters() {
                        let param = new URLSearchParams()
                        for (const npc of this.encounter) {
                            param.append('name', npc.name)
                            param.append('w', npc.w)
                            param.append('p', npc.p)
                            param.append('r', npc.r)
                            param.append('t', npc.t)
                            param.append('a', npc.a)
                        }

                        return param.toString()
                    },
                    remove(idx) {
                        this.encounter.splice(idx, 1)
                    }
                }))
        })
    </script>
{% endblock %}

{% block stylesheets %}
    <style>
        .npc-list {
            font-size: 110%;
        }
        .npc-list a, .npc-list p {
            margin: 0.5em;
            display: inline-block;
            cursor: pointer;
        }
        .choices {
            background-color: #eaeaea;
        }
    </style>
{% endblock %}
