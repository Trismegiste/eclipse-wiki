{% extends "base.html.twig" %}

{% block header_title %}Tracker{% endblock %}

{% block content %}
    <div x-data="behavior" class="pure-g">
        <section class="pure-u-1-2">
            <div class="npc-list pure-g choices">
                {# for npc in listing %}
                    <div class="pure-u-1-3">
                        <a x-on:click="push('{{ npc.title }}',{{ npc.wildCard ? 'true' : 'false' }},{{ npc.parry }},{{ npc.rangedMalus }},{{ npc.toughness }},{{ npc.totalArmor }})">
                            <i class="{{ char_icon(npc) }}"></i>
                            {{ npc.title }}
                        </a>
                    </div>
                {% endfor #}
                <input type="text" x-ref="search"/>
            </div>
        </section>
        <section class="pure-u-1-6">
            <div class="pure-g npc-list">
                <template x-for="(npc,idx) in encounter">
                    <div class="pure-u-1">
                        <p x-on:click="remove(idx)">
                            <i class="icon-token"></i>
                            <span x-text="npc.title"></span>
                        </p>
                    </div>
                </template>
            </div>
        </section>
        <div  class="pure-u-1-3">
            <canvas x-ref="qrious" class="pure-img" x-init="$watch('encounter', value => qrCode.value = staticUrl + getParameters())">
            </canvas>
        </div>
    </div>     
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="application/json" id="character-listing">
        {{ listing|json_encode()|raw }}
    </script>
    <script type="module">
        import QRious from 'qrious';
        import autoComplete from 'js-autocomplete';

        Alpine.data('behavior', () => ({
                staticUrl: '{{ url_tracker }}?',
                encounter: [],
                qrCode: null,

                init() {
                    this.qrCode = new QRious({
                        element: this.$refs.qrious,
                        size: Math.min(innerWidth, innerHeight),
                        level: 'M',
                        value: '-Vide-'
                    })

                    new autoComplete({
                        selector: this.$refs.search,
                        minChars: 2,
                        source: (term, suggest) => {
                            term = term.toLowerCase()
                            var choices = JSON.parse(document.getElementById("character-listing").textContent)
                            var suggestions = []
                            for (let i = 0; i < choices.length; i++) {
                                if (~choices[i].title.toLowerCase().indexOf(term)) {
                                    suggestions.push(choices[i])
                                }
                            }
                            suggest(suggestions)
                        },
                        renderItem: (item, search) => {
                            return '<div class="autocomplete-suggestion" data-content="' + btoa(JSON.stringify(item)) +
                                    '">' + item.title + '</div>'
                        },
                        onSelect: (e, term, item) => {
                            let npc = item.getAttribute('data-content')
                            this.encounter.push(JSON.parse(atob(npc)))
                        }
                    })
                },

                push(name, wc, par, rgm, tough, arm) {
                    this.encounter.push({name: name, w: wc, p: par, r: rgm, t: tough, a: arm})
                },

                getParameters() {
                    let param = new URLSearchParams()
                    for (const npc of this.encounter) {
                        param.append('name', npc.title)
                        param.append('w', npc.wildcard)
                        param.append('p', npc.parry)
                        param.append('r', npc.ranged)
                        param.append('t', npc.toughness)
                        param.append('a', npc.armor)
                    }

                    return param.toString()
                },

                remove(idx) {
                    this.encounter.splice(idx, 1)
                }
            }))
    </script>
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('pixabay/auto-complete.css') }}"/>
    <style>
        .npc-list {
            font-size: 110%;
        }
        .npc-list a, .npc-list p {
            margin: 0.5em;
            display: inline-block;
            cursor: pointer;
        }
        .choices {
            background-color: #eaeaea;
        }
    </style>
{% endblock %}
