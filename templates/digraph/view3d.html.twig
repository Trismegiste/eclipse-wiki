{% extends "base.html.twig" %}

{% block title %}YOLO{% endblock %}

{% block body %}
    <canvas id="renderCanvas">
    </canvas>
{% endblock %}

{% block javascripts %}
    <script src="https://cdn.babylonjs.com/havok/HavokPhysics_umd.js"></script>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/gui/babylon.gui.js"></script>
    <script type="module">
        const universe = {
            coulomb: 100,
            spring: 1,
            sphereRadius: 1,
            damping: 1
        }
        const colorScheme = new Map()
        colorScheme.set('timeline', BABYLON.Color3.Red())
        colorScheme.set('scene', BABYLON.Color3.Purple())
        colorScheme.set('transhuman', BABYLON.Color3.Blue())
        colorScheme.set('place', BABYLON.Color3.Green())
        colorScheme.set('default', BABYLON.Color3.Gray())

        const response = await
        fetch('{{ path('app_gmhelper_getgraph') }}')
        const graph = await
        response.json()
        const adjacency = graph.adjacency
        const size = adjacency.length
        graph.getOrder = function (idx) {
            let sum = 0
            for (let link of this.adjacency[idx]) {
                sum += link
            }

            return sum
        }

        // babylonjs
        const canvas = document.getElementById("renderCanvas") // Get the canvas element
        const engine = new BABYLON.Engine(canvas) // Generate the BABYLON 3D engine

        // Creates Scene object
        const scene = new BABYLON.Scene(engine)
        scene.clearColor = BABYLON.Color3.Black()

        // Creates and positions a free camera for GM
        const camera = new BABYLON.ArcRotateCamera("camera", 0, 0, 2 * size, new BABYLON.Vector3(0, 0, 0), scene);
        camera.attachControl(canvas, true)

        // Register a render loop to repeatedly render the scene
        engine.runRenderLoop(function () {
            scene.render()
        })
        // Watch for browser/canvas resize events
        window.addEventListener("resize", function () {
            engine.resize()
        })

        // enable physics in the scene with a gravity
        // initialize plugin
        const havokInstance = await
        HavokPhysics();
        // pass the engine to the plugin
        const hk = new BABYLON.HavokPlugin(true, havokInstance);
        scene.enablePhysics(new BABYLON.Vector3(0, 0, 0), hk);
        const advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");

        // Material
        const material = new Map()
        for (const [key, color] of colorScheme) {
            const matos = new BABYLON.StandardMaterial('mat-' + key)
            matos.emissiveColor = color
            matos.disableLighting = true
            material.set(key, matos)
        }

        let sphere = []
        let sphereAggregate = []
        for (const [idx, vertex] of graph.vertex.entries()) {
            let order = Math.max(1, Math.log2(graph.getOrder(idx)))
            // Our built-in 'sphere' shape.
            let mesh = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: order * universe.sphereRadius, segments: 12}, scene)
            mesh.position = new BABYLON.Vector3((Math.random() - 0.5) * size, (Math.random() - 0.5) * size, (Math.random() - 0.5) * size)
            let physic = new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, {mass: 1, restitution: 0.75}, scene);
            physic.body.setLinearDamping(universe.damping)
            sphere.push(mesh)
            sphereAggregate.push(physic)
            let matos = 'default'
            if (material.has(vertex.class)) {
                matos = vertex.class
            }
            mesh.material = material.get(matos)

            // label
            let label = new BABYLON.GUI.TextBlock()
            advancedTexture.addControl(label)
            label.text = vertex.title
            label.color = "white"
            label.shadowColor = "black"
            label.shadowBlur = 4
            label.linkWithMesh(mesh);
        }

        let lines = []
        for (let source = 0; source < size; source++) {
            for (let target = source + 1; target < size; target++) {
                if (adjacency[source][target]) {
                    const options = {
                        points: [sphere[source].position, sphere[target].position],
                        updatable: true
                    }
                    if (lines[source] === undefined) {
                        lines[source] = []
                    }
                    lines[source][target] = BABYLON.MeshBuilder.CreateLines("lines" + source + '-' + target, options, scene);
                }
            }
        }

        scene.registerBeforeRender(function () {
            // physics of Vertices
            for (let source = 0; source < size; source++) {
                for (let target = source + 1; target < size; target++) {
                    let delta = sphere[target].position.subtract(sphere[source].position)
                    let dist = delta.length()
                    let result = -universe.coulomb / Math.pow(dist, 2)
                    if (adjacency[source][target]) {
                        result += dist * universe.spring
                    }
                    delta.normalize()
                    sphereAggregate[source].body.applyForce(
                            delta.scale(result),
                            sphere[source].absolutePosition
                            )
                    sphereAggregate[target].body.applyForce(
                            delta.scale(-result),
                            sphere[target].absolutePosition
                            )
                }
            }
            // updating Edges
            for (let source = 0; source < size; source++) {
                for (let target = source + 1; target < size; target++) {
                    if (adjacency[source][target]) {
                        const options = {
                            points: [sphere[source].position, sphere[target].position],
                            instance: lines[source][target]
                        }
                        lines[source][target] = BABYLON.MeshBuilder.CreateLines("lines" + source + '-' + target, options, scene);
                    }
                }
            }
        })
    </script>
{% endblock %}


{% block stylesheets %}
    {{ parent() }}
    <style>
        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
{% endblock %}
