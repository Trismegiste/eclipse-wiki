{# player screen #}
{% extends "base.html.twig" %}

{% block title %}PlayerCast{% endblock %}

{% block body %}
    <div x-data="spa">
        <div class="waiting" x-show="!onAir">
            <i class="icon-spin3 animate-spin"></i>
        </div>        
        <div class="screencast" x-show="onAir">
            <img src="#" x-ref="tv"/>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/howler.core.min.js') }}"></script>    
    <script>
        var urlCreator = window.URL || window.webkitURL

        document.addEventListener('alpine:init', () => {
            Alpine.data('spa', () => ({
                    host: '{{ url_picture }}',
                    onAir: false,
                    clicSound: null,
                    socket: null,
                    init() {
                        var _this = this
                        this.clicSound = new Howl({
                            src: ['{{ asset('sound/clic.webm')}}', '{{ asset('sound/clic.ogg') }}']
                        })
                        this.resize()

                        this.socket = new WebSocket(this.host)
                        this.socket.onopen = function (msg) {
                            console.log('Connecting to ' + _this.host)
                            _this.onAir = true
                        }

                        this.socket.onmessage = function (msg) {
                            console.log('New picture')
                            _this.$refs.tv.src = urlCreator.createObjectURL(msg.data)
                            _this.$refs.tv.onload = function () {
                                urlCreator.revokeObjectURL(this.src)
                            }
                            _this.clicSound.play()
                        }

                        this.socket.onclose = function () {
                            console.log('Disconnected')
                            _this.onAir = false
                        }

                        // Watch for browser/canvas resize events
                        window.addEventListener("resize", () => {
                            this.resize();
                        });
                    },
                    resize() {
                        this.$refs.tv.height = document.documentElement.clientHeight
                        this.$refs.tv.width = document.documentElement.clientWidth
                    }
                }))
        })
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .waiting {
            font-size: 15em;
            color: #bbb;
            text-align: center;
        }

        .screencast {
            overflow: hidden;
            display: flex;
            background-color: #bbb;
        }

        img {
            max-width: inherit;
            max-height: inherit;
            object-fit: contain;
        }
    </style>
{% endblock %}
