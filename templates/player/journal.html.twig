{# Player log view #}
{% extends "base.html.twig" %}

{% block metadata_header %}
    <link rel="manifest" href="/playerlog.json">
{% endblock %}

{% block title %}Player{% endblock %}

{% block body %}
    <div x-data="playerLog('{{ mercure('public') }}')">
        <nav class="pure-menu  pure-menu-horizontal">
            <ul class="pure-menu-list">
                {% set navigation = ['picture', 'user-circle', 'file-pdf', 'hexagon', 'view3d'] %}
                {% for idx, panel in navigation %}
                    <li class="pure-menu-item" x-bind:class="newContent[{{ idx }}] && 'new-content'">
                        <a href="#{{ panel }}" class="pure-menu-link" x-on:click.prevent="showPanel({{ idx }})">
                            <i class="icon-{{ panel }}"></i>
                        </a>
                    </li>
                {% endfor %}
                <li class="pure-menu-item">
                    <a href="#up" class="pure-menu-link">
                        <i class="icon-angle-circled-up"></i>
                    </a>
                </li>
            </ul>
        </nav>
        <div x-show="panel===0"
             x-on:contextmenu.prevent="toggleFullScreen">
            <img x-ref="picture" src="/img/mire.png"/>
        </div>
        <div x-show="panel===1"
             x-on:contextmenu.prevent="toggleFullScreen">
            <div class="swiper"
                 x-ref="gesture">
                <div class="swiper-wrapper" x-ref="journal">
                </div>
            </div>
        </div>
        <div x-show="panel===3"
             x-on:contextmenu.prevent="toggleFullScreen">
            <img x-ref="battlemap"/>
        </div>
        <div x-show="panel===4">
            <canvas id="renderCanvas">
            </canvas>
        </div>
        <div x-show="panel===2">
            <ul class="document">
                <template x-for="doc in document">
                    <li><a x-bind:href="doc.link" x-text="doc.title" target="_blank"></a>
                </template>
            </ul>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {# parent() #}
    <script type="application/json" id="cubemap-grid">
        {{ doc|json_encode()|raw }}
    </script>
    <script type="module">
        import Swiper from 'swiper/swiper-bundle';
        import Manipulation from 'swiper/modules/manipulation';
        import * as Cubemap from 'cubemap-viewer';

        // performance issue : Babylon scene, engine objects must not be proxied by AlpineJs because it's slowing A LOT
        // That's why I initialize Babylon scene OUTSIDE of AlpineJs init()
        Cubemap.createCubemap(
                JSON.parse(document.getElementById("cubemap-grid").textContent),
                document.getElementById("renderCanvas"),
                '{{ mercure_publish_jwt }}'
                )

        Alpine.data('playerLog', (host) => ({
                host: host,
                socket: null,
                swiper: null,
                panel: 0,
                document: [],
                newContent: [false, false, false, false, false],

                init() {
                    // Socket
                    this.connect()

                    // Swiper
                    this.swiper = new Swiper(this.$refs.gesture, {
                        direction: 'vertical',
                        modules: [Manipulation]
                    })

                    // check if SSE connection is lost when window get focus
                    document.addEventListener('visibilitychange', () => {
                        if (document.visibilityState === 'visible') {
                            if (this.socket.readyState === EventSource.CLOSED) {
                                this.connect()
                            }
                        }
                    })
                },

                connect() {
                    let url = new URL(this.host)
                    // append last event id
                    const lastId = this.getLastEvent()
                    if (lastId) {
                        url.searchParams.append('lastEventID', lastId)
                    }
                    // append npc channel
                    if (this.getCurrentCharacterTitle()) {
                        url.searchParams.append('topic', 'private-' + this.getCurrentCharacterTitle())
                    }

                    // connection
                    this.socket = new EventSource(url)

                    this.socket.onopen = (msg) => {
                        console.log('Connected')
                    }

                    this.socket.addEventListener('profile', (msg) => {
                        console.log('New profile')
                        const content = document.createElement("div");
                        content.classList = ['swiper-slide']
                        content.dataset.contentId = msg.lastEventId
                        this.setLastEvent(msg.lastEventId)
                        const profile = document.createElement("img");
                        profile.src = msg.data
                        content.append(profile)
                        this.swiper.prependSlide(content)
                        this.swiper.slideTo(0, 500)
                        this.notifPanel(1)
                    })

                    this.socket.addEventListener('picture', (msg) => {
                        console.log('New picture')
                        this.setLastEvent(msg.lastEventId)
                        this.$refs.picture.src = msg.data
                        this.notifPanel(0)
                    })

                    this.socket.addEventListener('battlemap', (msg) => {
                        console.log('New battlemap')
                        this.setLastEvent(msg.lastEventId)
                        this.$refs.battlemap.src = msg.data
                        this.notifPanel(3)
                    })

                    this.socket.addEventListener('cubemap', (msg) => {
                        console.log('New cubemap')
                        this.setLastEvent(msg.lastEventId)
                        Cubemap.updateEnvironment(msg)
                        this.notifPanel(4)
                    })

                    this.socket.addEventListener('document', (msg) => {
                        console.log('New document')
                        this.setLastEvent(msg.lastEventId)
                        this.document.push(JSON.parse(msg.data))
                        this.notifPanel(2)
                    })

                    this.socket.onerror = () => {
                        console.log('Disconnected')
                    }
                },

                toggleFullScreen(event) {
                    const panel = event.currentTarget
                    if (!document.fullscreenElement) {
                        panel.requestFullscreen()
                        panel.classList = ['panel-fullscreen']
                    } else if (document.exitFullscreen) {
                        document.exitFullscreen();
                        panel.classList = []
                    }
                },

                showPanel(idx) {
                    this.panel = idx
                    this.newContent[idx] = false
                },

                notifPanel(idx) {
                    if (this.panel !== idx) {
                        this.newContent[idx] = true
                    }
                },

                saveContent() {
                    if (window.confirm("Voulez-vous sauver cette page ?")) {
                        // do something with localStorage and innerHTML, indexed with dataset.contentId
                    }
                },

                getCurrentCharacterTitle() {
                    return localStorage.getItem('characterTitle')
                },

                getLastEvent() {
                    return localStorage.getItem('lastEventID')
                },

                setLastEvent(id) {
                    localStorage.setItem('lastEventID', id)
                }
            }))
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"/>
    <style>
        .swiper {
            width: 100vw;
            height: calc(100vh - 2.2em);
        }

        img {
            margin: 0 auto;
            max-width: 100vw;
            max-height: calc(100vh - 2.2em);
            object-fit: contain;
            display: block;
            width: 100%;
        }

        .panel-fullscreen img {
            height: 100vh;
        }

        .document {
            line-height: 200%;
            font-size: 130%;
        }

        .new-content i {
            color: darkred;
        }

        #renderCanvas {
            height: calc(100vh - 2.2em);
            width: 100vw;
            display: block;
        }
    </style>
{% endblock %}

