{# Player peering #}
{% extends "base.html.twig" %}

{% block title %}Appairage Joueur{% endblock %}

{% block body %}
    <h1 class="big-title">{{ block('title') }}</h1>
    <div x-data="peering('{{ mercure('peering') }}', '{{ path('app_playerlog_index') }}')" class="peering">
        <h2>Bienvenue sur Eclipse-Wiki</h2>
        <h2>la webapp de VTTRPG</h2>
        <p>Ma clef d'appairage est</p>
        <p x-text="peeringKey" class="big"></p>
        <a x-show="character !== null" x-bind:href="playerLogUrl" class="pure-button">
            Se connecter en tant que
            <span x-text="character"></span>
        </a>
    </div>
{% endblock %}

{% block javascripts %}
    {# parent() #}
    <script type="module">
        import { MercureClient } from 'mercure-client';

        Alpine.data('peering', (mercureHost, playerLogUrl) => ({
                host: mercureHost,
                playerLogUrl: playerLogUrl,
                socket: null,
                peeringKey: null,
                character: null,

                init() {
                    // Before everything, check if the client was previously authenticated
                    if (this.getCurrentCharacterTitle()) {
                        this.character = this.getCurrentCharacterTitle()
                    }

                    // peering key
                    this.peeringKey = 1000 + Math.floor(Math.random() * 9000);
                    // SSE Socket
                    this.socket = new EventSource(this.host)
                    // listen to feeback from the GM
                    this.socket.addEventListener('validation', (msg) => {
                        console.log('Validation from GM')
                        const content = JSON.parse(msg.data)
                        if (content.identifier === this.peeringKey) {
                            console.log('Client authentifié en tant que ' + content.characterTitle)
                            this.setCurrentCharacterTitle(content.characterTitle)
                        }
                    })

                    // « Hello I'm here and I want to peer with this ID »
                    const client = new MercureClient({{ mercure_publish_jwt }})
                    client.publish('peering', 'ask', {
                        identifier: this.peeringKey,
                        ip: '192.168.1.1',
                        browser: window.navigator.userAgent
                    }).then(data => {
                        console.log(data)
                    })
                },

                getCurrentCharacterTitle() {
                    return localStorage.getItem('characterTitle')
                },

                setCurrentCharacterTitle(title) {
                    this.character = title
                    localStorage.setItem('characterTitle', title)
                }
            }))
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .peering {
            text-align: center;
        }
        .peering .big {
            font-size: 400%;
        }
    </style>
{% endblock %}
