{% extends "base.html.twig" %}

{% block title %}Instancier un {{ 'NPC' }}{% endblock %}
{% set avatarSize = 500 %}

{% block content %}
    <canvas height="{{ avatarSize }}" width="{{ avatarSize }}" id="avatar-tmp">
    </canvas>
    {{ form(form) }}
    <section class="pure-g quick-npc">
        {% for avatar in bauhaus %}
            <div class="pure-u-1-8">
                <figure class="avatar">
                    {{ avatar|raw }}
                </figure>
            </div>
        {% endfor %}
    </section>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        svg {
            width: 100%;
        }
        figure {
            margin: 1em;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('multiavatar/multiavatar.min.js') }}"></script>
    <script src="{{ asset('js/crop-helper.js') }}"></script>
    <script>
        var onTheFly = document.querySelector('form[name=profile_on_the_fly]')
        var avatarSample = document.querySelectorAll('.avatar')
        var hiddenCanvas = document.getElementById('avatar-tmp')

        for (const sample of avatarSample) {
            // event for updating file widget with avatar
            sample.addEventListener("click", function (e) {
                let imgTmp = new Image()
                let ctx = hiddenCanvas.getContext('2d')

                imgTmp.onload = function () {
                    ctx.drawImage(this, 0, 0)
                    const fileInput = document.getElementById('{{ profile_on_the_fly['avatar'].vars.id }}')
                    fileInput.files = dataURLtoFile(hiddenCanvas.toDataURL(), 'avatar.png'))
                }
                imgTmp.src = svgContentToDataUrl(fixSvgDimension(this.innerHTML, {{ avatarSize }}))
            })
        }
    </script>
{% endblock %}
