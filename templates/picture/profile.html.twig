{# generate profile picture #}
{% extends "base.html.twig" %}
{% form_theme form _self %}

{% set avatarSize = 500 %}

{% macro avatar_listing(size) %}
    <div class="pure-u-1-5">
        {% for k in 1..5 %}
            <div  class="avatar-sample">
                <img width="100" height="100"/>
                <canvas height="{{ size }}" width="{{ size }}" style="display:none"></canvas>
            </div>
        {% endfor %}
    </div>
{% endmacro %}

{% block header_title %}
    {{ include('npc/menu.html.twig', {npc: form.vars.data}) }}
{% endblock %}

{% block content %}
    <div class="pure-g">
        {{ _self.avatar_listing(avatarSize) }}
        <div class="pure-u-3-5" x-data>
            {{ form(form) }}
        </div>
        {{ _self.avatar_listing(avatarSize) }}
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('foliotek/croppie.css') }}" />
    <style>
        .avatar-sample {
            text-align: center;
        }

        .avatar-sample img {
            cursor: zoom-in;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('foliotek/croppie.min.js') }}"></script>
    <script src="{{ asset('js/crop-helper.js') }}"></script>
    <script src="{{ asset('multiavatar/multiavatar.min.js') }}"></script>
    <script>
        // sending form in ajax
        document.getElementById('profile_pic_generate').addEventListener('click', function (e) {
            e.preventDefault()
            let uploadForm = document.querySelector('article form')
            let data = new FormData(uploadForm)

            uploadCrop.result('base64').then(function (dataUrl) {
                data.set('profile_pic[avatar]', dataURLtoFile(dataUrl, 'avatar.png'))
                fetch(uploadForm.action, {
                    method: 'post',
                    body: data,
                    redirect: 'manual'
                }).then(function (response) {
                    location.href = '{{ path('app_vertexcrud_show', {pk: form.vars.data.pk}) }}'
                }).catch((error) => {
                    console.error(error);
                })
            })
        }) // fin du form

        {% if form.vars.data.extractFirstPicture is not empty %}
            window.addEventListener('load', (event) => {
                uploadCrop.bind({url: '{{ path('get_picture', {title: form.vars.data.extractFirstPicture}) }}'})
            })
        {% endif %}
    </script>

    <script>
        window.addEventListener("load", function () {
            var avatarSample = document.querySelectorAll('.avatar-sample')

            for (const [idx, sample] of avatarSample.entries()) {
                let hiddenCanvas = sample.querySelector('canvas')
                let button = sample.querySelector('img')
                let ctx = hiddenCanvas.getContext('2d')
                let imgTmp = new Image()
                imgTmp.onload = function () {
                    ctx.drawImage(this, 0, 0)
                }
                let avatarId = '{{ form.vars.data.title }}' + (idx === 0 ? '' : Math.random())
                let svgCode = multiavatar(avatarId)

                // updating image
                imgTmp.src = svgContentToDataUrl(fixSvgDimension(svgCode, {{ avatarSize }}))
                button.src = imgTmp.src

                // event for choosing avatar
                button.addEventListener("click", function (e) {
                    uploadCrop.bind({url: e.target.parentNode.querySelector('canvas').toDataURL()})
                })
            }
        })
    </script>    
{% endblock %}

