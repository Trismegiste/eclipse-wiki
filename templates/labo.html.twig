{% extends "base.html.twig" %}

{% block content %}
    <div x-data="autocomplete">
        <textarea x-model="content" x-on:keyup="keyUp" x-ref="editor" style="width: 600px; height: 200px;">
        </textarea>
        <template x-if="open">
            <ul x-ref="combo">
                <template x-for="item in result">
                    <li x-text="item" x-on:click="choose(item)"></li>
                </template>
            </ul>
        </template>
    </div>
{% endblock %}

{% block javascripts %}
    <script type="module">
        Alpine.data('autocomplete', () => ({
                content: '',
                open: false,
                result: [],
                strategy: [
                    {
                        pattern: /\[\[([^\]]+)$/,
                        url: '{{ path('app_vertexcrud_search') }}?q='
                    }
                ],

                init() {
                    this.$refs.editor.focus()
                },

                keyUp(event) {
                    let strategy = this.strategy[0]
                    let extract = strategy.pattern.exec(this.content.substring(0, this.getCaretPosition()))
                    if (null !== extract) {
                        this.open = true
                        fetch(strategy.url + extract[1])
                                .then((response) => {
                                    return response.json()
                                })
                                .then((data) => {
                                    this.result = data
                                })
                    } else {
                        this.open = false
                    }
                },

                choose(value) {
                    let pattern = this.strategy[0].pattern
                    let caret = this.getCaretPosition()
                    let before = this.content.substring(0, caret)
                    let after = this.content.substring(caret)

                    let extract = pattern.exec(before)
                    if (null !== extract) {
                        let newValue = `[[${value}]] `
                        caret += newValue.length - extract[0].length
                        this.content = pattern[Symbol.replace](before, newValue) + after
                        this.$nextTick(() => {
                            this.$refs.editor.focus()
                            this.$refs.editor.setSelectionRange(caret, caret)
                        })

                    }
                    this.open = false
                },

                getCaretPosition() {
                    return this.$refs.editor.selectionEnd
                }
            }))
        Alpine.start()
    </script>
{% endblock %}