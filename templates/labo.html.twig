{% extends "base.html.twig" %}

{% block content %}
    <div x-data="autocomplete">
        <textarea x-model="content" x-on:keyup="keyUp" x-on:click="open=false" x-ref="editor" style="width: 600px; height: 200px;">
        </textarea>
        <template x-if="open">
            <select id="combo" x-bind:style="caretPos" size="10"
                    x-ref="combobox"
                    x-model="selected"
                    x-on:click="choose"
                    x-on:keyup="if ($event.key==='Enter') choose($event)">
                <template x-for="item in result" :key="item">
                    <option x-text="item" x-bind:value="item"></option>
                </template>
            </select>
        </template>
    </div>
{% endblock %}

{% block javascripts %}
    <script type="module">
        import getCaretCoordinates from 'textarea-caret';

        Alpine.data('autocomplete', () => ({
                caretChangingKey: ['Escape', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'],
                content: '',
                open: false,
                caretPos: {top: 0, left: 0},
                result: [],
                strategy: [
                    {
                        pattern: /\[\[([^\]]+)$/,
                        url: '{{ path('app_vertexcrud_search') }}?q='
                    }
                ],
                selected: null,

                keyUp(event) {
                    // if the caret is changing position : stop the autocomplete
                    if (this.caretChangingKey.includes(event.key)) {
                        this.open = false
                        return;
                    }
                    let strategy = this.strategy[0]
                    let extract = strategy.pattern.exec(this.content.substring(0, this.getCaretPosition()))
                    if (null !== extract) {
                        // position the combobox if we match
                        if (!this.open) {
                            let caretPosition = getCaretCoordinates(this.$refs.editor, this.$refs.editor.selectionEnd);
                            let rect = this.$refs.editor.getBoundingClientRect()
                            this.caretPos.top = (rect.top + caretPosition.top + caretPosition.height) + 'px'
                            this.caretPos.left = (rect.left + caretPosition.left) + 'px'
                        }
                        //fetching ajax
                        fetch(strategy.url + extract[1])
                                .then((response) => {
                                    return response.json()
                                })
                                .then((data) => {
                                    this.result = data
                                    // showing the combobox only if there are results
                                    this.open = (data.length > 0)
                                })
                    } else {
                        this.open = false
                    }
                },

                choose(event) {
                    let pattern = this.strategy[0].pattern
                    let caret = this.getCaretPosition()
                    let before = this.content.substring(0, caret)
                    let after = this.content.substring(caret)

                    let extract = pattern.exec(before)
                    if (null !== extract) {
                        let newValue = `[[${this.selected}]] `
                        caret += newValue.length - extract[0].length
                        this.content = pattern[Symbol.replace](before, newValue) + after
                        this.$nextTick(() => {
                            this.$refs.editor.focus()
                            this.$refs.editor.setSelectionRange(caret, caret)
                        })

                    }
                    this.open = false
                },

                getCaretPosition() {
                    return this.$refs.editor.selectionEnd
                }
            }))
        Alpine.start()
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #combo {
            position: absolute;
            background-color: #eee;
        }
    </style>
{% endblock %}