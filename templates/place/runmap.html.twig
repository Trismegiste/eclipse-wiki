{# show battlemap #}
{% extends "base.html.twig" %}

{% block title %}{{ title }}{% endblock %}

{% block body %}
    <div x-data="spa" class="pure-g">
        <div class="pure-u-3-5">
            <div id="map">{{ svg|raw }}</div>
        </div>
        <div class="pure-u-2-5">
            {{ form(tools) }}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('svgdotjs/svg.min.js') }}"></script>
    <script src="{{ asset('svgdotjs/svg.panzoom.min.js') }}"></script>
    <script src="{{ asset('svgdotjs/svg.draggable.min.js') }}"></script>
    <script>

        document.addEventListener('alpine:init', () => {
            Alpine.data('spa', () => ({
                    battlemap: null,
                    fogEnabled: true,
                    legendFilter: null,
                    newCharacter: null,

                    init() {
                        let svgElem = document.querySelector('#map svg')
                        this.battlemap = SVG(svgElem)
                        this.battlemap.panZoom({zoomMin: 5, zoomMax: 100, zoomFactor: 0.2})

                        // remove fog of war for one room on a double click event
                        document.querySelectorAll('#map g.fog-of-war').forEach(function (item) {
                            item.addEventListener('dblclick', function (e) {
                                item.remove()
                            })
                        })

                        // make all NPC draggable
                        document.querySelectorAll('svg #layer-npc use').forEach(function (item) {
                            SVG(item).draggable()
                        })

                        // Broadcast current view with a key
                        Mousetrap.bind('p', () => {
                            this.pushSvgToBroadcast()
                        })
                    },

                    toggleFog() {
                        let fogLayer = document.querySelector('#map #gm-fogofwar')
                        fogLayer.setAttribute('class', this.fogEnabled ? '' : 'disabled-fog')
                    },

                    searchLegend() {
                        let xpath = '//svg:svg/svg:g[@id="legend"]/svg:text[normalize-space()="' + this.legendFilter.trim().toUpperCase() + '"]'
                        let legend = document.evaluate(xpath, document, function (prefix) {
                            const ns = {
                                'xhtml': 'http://www.w3.org/1999/xhtml',
                                'svg': 'http://www.w3.org/2000/svg'
                            }
                            return ns[prefix] || null
                        }, XPathResult.ANY_UNORDERED_NODE_TYPE).singleNodeValue

                        if (legend) {
                            let cx = legend.getAttribute('x')
                            let cy = legend.getAttribute('y')
                            this.battlemap
                                    .zoom(1) // uses center of viewport by default
                                    .animate()
                                    .zoom(75, {x: cx, y: cy})
                        }
                    },

                    characterAdd() {
                        fetch('/token/get/' + this.newCharacter).then((response) => {
                            return response.text()
                        }).then((content) => {
                            let bbox = this.battlemap.viewbox()
                            let token = this.battlemap.group()
                            token.svg(content)
                                    .move(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2)
                                    .draggable()
                        })

                        this.newCharacter = null
                    },

                    playerBroadcast(e) {
                        e.preventDefault()
                        this.pushSvgToBroadcast()
                    },

                    pushSvgToBroadcast() {
                        const formData = new FormData()
                        formData.append('svg', new Blob([this.battlemap.svg()], {type: 'image/svg+xml'}))

                        fetch('{{ path('app_voronoicrud_pushplayerview') }}', {
                            method: 'post',
                            body: formData,
                            redirect: 'manual'
                        }).then(function (response) {
                            return response.json()
                        }).then(function (json) {
                            console.log(json.message)
                        })
                    }
                }))
        })
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .disabled-fog {
            opacity: 0.33;
        }
        .pure-form .pure-u-1-2 > label {
            margin: .5em 0 .2em;
            text-align: right;
            padding-right: 1em;
            padding-left: 0.1em;
            display: block;
        }
    </style>
{% endblock %}