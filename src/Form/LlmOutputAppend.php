<?php

/*
 * eclipse-wiki
 */

namespace App\Form;

use App\Entity\Vertex;
use App\Service\Ollama\OutputConverter;
use App\Service\Ollama\ParameterizedPrompt;
use App\Service\Ollama\RequestFactory;
use InvalidArgumentException;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\DataMapperInterface;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Traversable;

/**
 * Append a output generated by a LLM to a content of a vertex
 */
class LlmOutputAppend extends AbstractType implements DataMapperInterface
{

    public function __construct(protected OutputConverter $converter, protected RequestFactory $payloadFactory)
    {
        
    }

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
                ->add('prompt_param', HiddenType::class, ['data' => json_encode($options['prompt']->param)])
                ->add('generation', TextareaType::class, ['attr' => ['x-model' => 'content', 'rows' => 30]])
                ->add('save', SubmitType::class)
                ->setMethod('PATCH')
                ->setDataMapper($this)
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefault('data_class', Vertex::class);
        $resolver->setRequired('prompt');
        $resolver->setAllowedTypes('prompt', ParameterizedPrompt::class);
    }

    public function mapDataToForms(mixed $viewData, Traversable $forms): void
    {
        
    }

    public function mapFormsToData(Traversable $forms, &$viewData): void
    {
        if (!$viewData instanceof Vertex) {
            throw new InvalidArgumentException("Object viewdata is not a Vertex");
        }

        $field = iterator_to_array($forms);
        $viewData->appendBlockWithTitle($field['subtitle']->getData(), $this->converter->toWikitext($field['generation']->getData()));
    }

    public function finishView(FormView $view, FormInterface $form, array $options): void
    {
        $view->vars['payload'] = $this->payloadFactory->create($options['prompt']->prompt);
    }

}
